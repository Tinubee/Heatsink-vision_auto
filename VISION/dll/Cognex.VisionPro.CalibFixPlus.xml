<?xml version="1.0"?>
<doc>
    <assembly>
        "Cognex.VisionPro.CalibFixPlus"
    </assembly>
    <members>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.Run">
            <summary>
Runs the tool using the current parameter settings.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.InputImage" />
is NULL.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoRunParamsException">
                <see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.RunParams" />
is NULL.
</exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.RunParams.UnfilledPelValue" />
is greater than 255 if
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.InputImage" />
is <see cref="T:Cognex.VisionPro.CogImage8Grey" />,
or greater than 65535 if
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.InputImage" />
is <see cref="T:Cognex.VisionPro.CogImage16Grey" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException">
                <see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.Corrector" />
is NULL.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException">
                <see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.Corrector" />
is not trained.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
                <see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.InputImage" />
is not of the same type as
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.Corrector.TrainingImage" />.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.CorrectedImage">
            <summary>
Gets the result image from the last invocation of the Run method. 
A new instance of ICogImage is created for each running.
Previous results will be released prior to the new correction.
</summary>
            <value>
The result image. 
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.Corrector">
            <summary>
Gets or sets the <see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector" /> object.
</summary>
            <value> The operator.
<para>Default value is a default-constructed 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector" />.
</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfCorrector </item>
                    <item> SfCreateCurrentRecord </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.RunParams">
            <summary>
Gets or sets the run parameters for this CogCalibImageCorrectorTool.
</summary>
            <value>
The run parameters.
<para>Default value is a default constructed
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams" />.
</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfRunParams </item>
                    <item> SfCreateCurrentRecord </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.InputImage">
            <summary>
Gets or sets the input image used to be corrected.
</summary>
            <value>
The input image. 
<para>Default value is NULL.</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfInputImage </item>
                    <item> SfCreateCurrentRecord </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the 
appropriate <see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants" />.
</summary>
            <value> This read/write property is a bitwise combination of 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants" />.
<para>Default value is CorrectedAxes.</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfLastRunRecordDiagEnable </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the 
appropriate <see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordConstants" />.
</summary>
            <value> This read/write property is a bitwise combination of 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordConstants" />.
<para>Default value is CorrectedImage</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfLastRunRecordEnable </item>
                    <item> SfCreateLastRunRecord </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the 
appropriate <see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants" />.
</summary>
            <value> This read/write property is a bitwise combination of 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants" />. 
<para>Default value is InputImage | CorrectedAxes | TrainingImage | TrainingImagesCorrectedAxes | CorrectedTrainingImage | CorrectedTrainingImageDestinationRectangle | CorrectedTrainingImageMask</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfCurrentRecordEnable </item>
                    <item> SfCreateCurrentRecord </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.#ctor(Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool)">
            <summary>
Construct a deep copy of the supplied CogCalibImageCorrectorTool object.
</summary>
            <param name="other">
The CogCalibImageCorrectorTool object to be copied. May not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is NULL.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool.#ctor">
            <summary>
Construct a default CogCalibImageCorrectorTool object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorTool">
            <summary>
This class provides tool level access to the 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector" /> operator. 
This class encapsulates all of the 
classes required to perform image correction with <see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector" /> operator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidator.Execute(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CalibFix.CogHandEyeCalibrator)">
            <summary>
Compute the CogMotionStageValidationResult for the supplied inputs, 
using the current parameter settings and the supplied calibrator.
</summary>
            <param name="correspondedPointPairs">
The corresponded point pairs to be processed.
</param>
            <param name="pelRects">
The pelrects used to extract the corresponded point pairs. There
should be one pelrect for each camera.
</param>
            <param name="uncorrectedHome2DFromStage2D">
The sequence of uncorrectedHome2DFromStage2D poses that were used to 
acquire the images that provided the corresponded point pairs.
For each validation metric that is requested, the tool will automatically
identify all suitable subsets of poses in uncorrectedHome2DFromStage2D 
that support the metric. The tool will compute one 
CogMotionStageValidationMetricResult for each such suitable subset. 
If no suitable subset could be found for a particular requested metric, 
no CogMotionStageValidationMetricResult of that metric type will be 
computed.
</param>
            <param name="calibrator">
The configured calibrator to use in this validation.
</param>
            <returns>
A CogMotionStageValidationResult containing the results of the
MotionStageValidation.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the correspondedPointPairs argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the calibrator argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the number of pelrects in the pelRects argument does not match 
the number of cameras described in the correspondedPointPairs argument.
</exception>
            <exception cref="T:System.ArgumentException">
If the number of poses in the correspondedPointPairs argument does not 
match the number of uncorrectedHome2DFromStage2D poses in the 
uncorrectedHome2DFromStage2D argument. 
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If VxHandEyeCalib2D license is not set.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this operation takes longer than 
Timeout milliseconds. 
</exception>
            <remarks>
                <para>
The value of the parameter motionCapability inside calibrator is
ignored. The tool will automatically determine the motionCapability
based on the input uncorrectedHome2DFromStage2D. The tool will automatically 
determine which poses in uncorrectedHome2DFromStage2D have 
different types of motion, and will set the motionCapability accordingly.
</para>
                <para>
There may be multiple sets of poses that have a particular type of 
motion. The tool will compute a CogMotionStageValidationMetricResult 
result for every set of uncorrectedHome2DFromStage2D poses that contains 
the type of motion corresponding to each metric requested for in 
validationParams.
</para>
                <para>
The calibrator’s TimeoutEnabled and Timeout properties will be ignored.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidator.Timeout">
            <summary>
The maximum time in milliseconds that the Execute method
will be allowed to run if TimeoutEnabled is true.
</summary>
            <value>
The default is the 120000.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The supplied value is less than or equal to zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidator.TimeoutEnabled">
            <summary>
Enable or disable timeout for the Execute methods.
</summary>
            <value>
The default is False.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidator.Metrics">
            <summary>
The bitwise-or of the metrics to compute
</summary>
            <value>
The default is CogMotionStageValidationMetricConstants::All.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogMotionStageValidator object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidator.Finalize">
            <summary>
Finalize this CogMotionStageValidator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidator.Dispose">
            <summary>
Destruct this CogMotionStageValidator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidator.#ctor(Cognex.VisionPro.CalibFix.CogMotionStageValidator)">
            <summary>
Copy constructs a CogMotionStageValidator object.
</summary>
            <param name="other">
The CogMotionStageValidator object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidator.#ctor">
            <summary>
Create a default CogMotionStageValidator object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidator.SfTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Timeout
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidator.SfTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TimeoutEnabled
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidator.SfMetrics">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Metrics
may have been changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidator">
            <summary>
The CogMotionStageValidator class performs motion stage validation
prior to performing a hand-eye calibration of the stage in a machine vision
system with one or more cameras. The purpose of this class is to verify that
the stage moves to its commanded poses (X, Y, Theta), and to characterize
certain types of systematic errors in the observed motion.
</summary>
            <remarks>
                <para>
The physical setup to perform motion stage validation is identical
to the setup used in 2D hand-eye calibration. As a result, the usage
of this class is very closely tied to CogHandEyeCalibrator
class. Please see CogHandEyeCalibrator class description for a 
detailed description of the setup, the relationship between the 
different coordinate spaces, and the best practices to be followed.
</para>
                <para>
                    <b>Home2DFromStage2D and UncorrectedHome2DFromStage2D</b>
                    <list type="bullet">
                        <item>
                            <b>Home2DFromStage2D (Actual physical pose of the motion stage)</b>
                            <br />
Home2DFromStage2D is the actual physical pose of the motion stage in
Home2D. It defines the relationship between Home2D and Stage2D and can
be represented by a 2D rigid transform.
</item>
                        <item>
                            <b>UncorrectedHome2DFromStage2D (Commanded pose of the motion stage)</b>
                            <br />
Due to systematic errors in the motion stage, the commanded pose of
the motion stage may not match the actual physical pose of the motion
stage in Home2D (i.e., Home2DFromStage2D). The term
UncorrectedHome2DFromStage2D is used to describe the commanded pose of
the motion stage because it represents the user's best guess of the
pose of the motion stage prior to calibration.
</item>
                    </list>
                </para>
                <para>
                    <b>Validation metrics</b>
                    <br />
                    <br />
Similar to the hand-eye calibration usage model this tool uses 
correspondence data extracted from all views (images) from all cameras, 
along with the UncorrectedHome2DFromStage2D pose associated with each view. 
The tool validates the motion stage for all sets of 
UncorrectedHome2DFromStage2D poses that contain motion corresponding 
to the metric requested for in the input params. The different validation 
metrics are associated with the following types of motion:  
<table border="3"><th colspan="3" /><tr><td>Metric</td><td>Motion type</td><td>Min num Poses</td></tr><tr><td>XScale</td><td>x-translation only </td><td>2</td></tr><tr><td>YScale</td><td>y-translation only </td><td>2</td></tr><tr><td>ThetaScale</td><td>rotation only  </td><td>2</td></tr><tr><td>Skew</td><td>x and y translations only </td><td>3</td></tr></table>
The metrics to be computed are given by a bitwise-OR of values from the
enum class CogMotionStageValidationMetricConstants.
</para>
                <para>
                    <b>Pose Subsets</b>
                    <br />
                    <br />
Consider a set of 14 UncorrectedHome2DFromStage2D poses as shown below. It 
has 9 poses that have translation only, arranged in a 3x3 grid, and 5 poses 
that have rotation only, 
</para>
                <para>
                    <code>
       (rotation only poses)            (translation only poses)
               11                    0 ----------- 1 ----------- 2
          10    |    12              |             |             |
       9_   \   |   /   _ 13         |             |             |
         -_  \  |  /  _-             |             |             |
           -_ \ | / _-               |             |             |
              - + -------------&gt;     |             |             |
                |    x-axis          3 ----------- 4 ----------- 5
             y  |                    |             |             |
             a  |                    |             |             |
             x  |                    |             |             |
             i  |                    |             |             |
             s  |                    |             |             |
                V                    6 ----------- 7 ----------- 8
 
 
           Fig 1. Example of a set of UncorrectedHome2DFromStage2D poses
</code>
                </para>
                <para>
In total, there are 8 combinations of poses from the given set of 14
that have different types of motion:<br /><list type="bullet"><item>
  3 sets that have x-translation only, that can be used to compute x-scale:<br />
       =&gt; [{0,1,2}, {3,4,5}, {6,7,8}]
</item><item>
  3 sets that have y-translation only, that can be used to compute y-scale:<br />
       =&gt; [{0,3,6}, {1,4,7}, {2,5,8}]
</item><item>
  1 set that has x and y translations only, that can be used to compute 
   skew:<br />
       =&gt; [{0,1,2,3,4,5,6,7,8}]
</item><item>
  1 set that has rotation only, that can be used to compute theta-scale:<br />
       =&gt; [{9,10,11,12,13}]
</item></list></para>
                <para>
                    <b>Suitable Pose Subset</b>
                    <br />
                    <br />
The tool automatically identifies maximal subsets of the poses based on 
characteristics of the motion between each pair of poses in the subset.
Each such subset is referred to as a 'suitable-subset' and can be used to
compute a particular validation metric. A suitable-subset is guaranteed to 
meet the following requirements:
<list type="number"><item>
It is a subset of poses that represent the motion required for a 
particular metric. For example, the eXScale metric requires collinear
motion parallel to the x-axis. So a suitable subset for the eXScale
metric would be a subset of poses, such that each pair of poses in the
subset describes a motion parallel to the x-axis. 
</item><item>
If the metric is XScale:
<list type="number"><item>
    The subset has at least 2 poses.
</item><item>
    The x-translation of all poses in the subset are not exactly the same. 
</item><item>
    The y-translation of all poses in the subset are the same, to within
    a tolerance of 0.0001% of the total x-translation range across
    all the input UncorrectedHome2DFromStage2D poses.
</item><item>
    The rotation of all poses in the subset are the same, to within a tolerance
    of 1e-6 degrees. 
</item></list></item><item>
If the metric is YScale:
<list type="number"><item>
    The subset has at least 2 poses.
</item><item>
    The y-translation of all poses in the subset are not exactly the same. 
</item><item>
    The x-translation of all poses in the subset are the same, to within
    a tolerance of 0.0001% of the total y-translation range across
    all the input UncorrectedHome2DFromStage2D poses.
</item><item>
    The rotation of all poses in the subset are the same, to within a tolerance
    of 1e-6 degrees. 
</item></list></item><item>
If the metric is ThetaScale:
<list type="number"><item>
    The subset has at least 2 poses.
</item><item>
    The rotation range of all poses in the subset is greater than or equal to 
    the minimum rotation span specified in the calibration params.
</item><item>
    The x-translation of all poses in the subset are exactly the same.
</item><item>
    The y-translation of all poses in the subset are exactly the same. 
</item></list></item><item>
If the metric is Skew:
<list type="number"><item>
    The subset has at least 3 poses.
</item><item>
    The x-translation of all poses in the subset are not exactly the same.
</item><item>
    The y-translation of all poses in the subset are not exactly the same.
</item><item>
    The poses are not roughly collinear. The poses are said to be roughly  
    collinear if, when projecting the x and y translation components to any
    pair of perpendicular axes, the shortest projection span is less than 
    10% of the longest projection span.
</item></list></item><item>
    It is the maximal subset of poses that satisfies all the requirements
    listed above. This implies that a suitable-subset will never be 
    a subset of another suitable-subset that has the same type of motion.
    However two suitable-subsets that have the same type of motion 
    may have one or more poses in common.
</item></list>
The tool allows exact duplicates of the input UncorrectedHome2DFromStage2D 
poses. The tool will attempt to use all input poses as much as possible.
</para>
                <para>
                    <b>Metric-results (CogMotionStageValidationMetricResult)</b>
                    <br />
                    <br />
The tool generates a CogMotionStageValidationMetricResult object for each
suitable-subset that it can find. Each metric-result object characterizes 
the systematic error in the stage motion corresponding to a particular 
type of motion, e.g., a metric-result object generated from 
UncorrectedHome2DFromStage2D poses that contain only translation along the 
X-axis will contain a result for the x-scale only. In addition, each 
metric-result object contains residuals in  X, Y and Theta (in radians) 
that describe the error between the estimated home2DFromStage2D poses and 
the given UncorrectedHome2DFromStage2D poses used to compute the result. 
The ideal values for x-scale, y-scale, theta-scale and skew in a 
metric-result are 1.0 (unitless), 1.0 (unitless), 1.0 (unitless) and 
0.0 (radians) respectively. 
</para>
                <para>
                    <b>Failed-metric-result (CogMotionStageValidationFailedMetricResult)</b>
                    <br />
                    <br />
If the tool fails to compute a metric-result for a suitable-subset,
it produces a CogMotionStageValidationFailedMetricResult object
that contains the metric the tool was trying to compute, the indices of 
the UncorrectedHome2DFromStage2D poses in the subset and the reason for
failure. The enum class CogMotionStageValidationFailureTypeConstants 
lists the reasons why the tool may fail to compute a metric-result.

If no suitable-subset could be found for a metric that was requested,
no metric-result or failed-metric-result of that metric type will be 
computed. 
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.GetFailedMetricResults">
            <summary>
Returns an array of CogMotionStageValidationMetricResult objects. 
If there were no failures this will be an empty array.
</summary>
            <returns>
Failed metris results
</returns>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.GetMetricResults(Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants)">
            <summary>
Returns the results computed from all sets of 
UncorrectedHome2DFromStage2D in the input
 UncorrectedHome2DFromStage2D poses that have the given metric.
</summary>
            <param name="whichMetric"> 
CogMotionStageValidationMetricConstants. The metric of interest. 
Note that this may only be a single metric.
it may not be a bitwise-OR of multiple metrics.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetricResults(whichMetric) is false.
</exception>
            <exception cref="T:System.ArgumentException">
If whichMetric is not one of XScale, YScale, ThetaScale, or Skew.
</exception>
            <returns>
Computed Results.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.HasMetricResults(Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants)">
            <summary>
Returns true if this result contains the specified metric, 
false otherwise.
</summary>
            <param name="whichMetric"> 
CogMotionStageValidationMetricConstants. The metric of interest. 
Note that this may only be a single metric. 
it may not be a bitwise-OR of multiple metrics.
</param>
            <exception cref="T:System.ArgumentException">
If whichMetric is not one of XScale, YScale, ThetaScale, or Skew.
</exception>
            <returns>
True/False
</returns>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.ComputedMetrics">
            <summary>
Returns the bitwise-OR of all metrics that were actually computed 
in this result.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.RequestedMetrics">
            <summary>
Returns the bitwise-OR of all requested metrics.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogMotionStageValidationResult object.
</summary>
            <param name="Info"> 
SerializationInfo. The standard serialization info argument.
</param>
            <param name="Ctxt"> 
StreamingContext. The standard streaming context argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult.#ctor(Cognex.VisionPro.CalibFix.CogMotionStageValidationResult)">
            <summary>
Copy constructs a CogMotionStageValidationResult object. This is 
a deep copy.
</summary>
            <param name="other">
CogMotionStageValidationResult. The result object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidationResult">
            <summary>
The CogMotionStageValidationResult class is the top level motion stage 
validation result.
This class contains the validation result for all the requested metrics. It
serves as a container that holds all CogMotionStageValidationMetricResults 
objects that were each computed for specific metrics.It is an immutable 
object - its content is set at construction and cannot be changed.
</summary>
            <remarks>
The term "suitable subsets" is explained in the 
<see cref="T:Cognex.VisionPro.CalibFix.CogMotionStageValidator" /> class. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.HasMetric(Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants)">
            <summary>
Returns true if this result contains the specified metric, false otherwise.
</summary>
            <param name="whichMetric"> 
The metric of interest. Note that this is a single metric; it is not a 
bitwise-OR of multiple metrics.
</param>
            <exception cref="T:System.ArgumentException">
If whichMetric is not one of XScale, YScale, ThetaScale, or Skew.
</exception>
            <returns>
True if this result contains the specified metric.
</returns>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.OverallThetaResidualInRadiansRMS">
            <summary>
Returns the root mean square overall residual in radians around the 
Theta axis computed from all the results that comprise this result
collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.OverallThetaResidualInRadiansMax">
            <summary>
Returns the maximum overall residual in radians around the Theta axis 
computed from all the results that comprise this result collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.OverallYResidualRMS">
            <summary>
Returns the root mean square overall residual along the Y axis computed 
from all the results that comprise this result collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.OverallYResidualMax">
            <summary>
Returns the maximum overall residual along the Y axis computed 
from all the results that comprise this result collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.OverallXResidualRMS">
            <summary>
Returns the root mean square overall residual along the X axis computed 
from all the results that comprise this result collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.OverallXResidualMax">
            <summary>
Returns the maximum overall residual along the X axis computed 
from all the results that comprise this result collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.SkewStatisticsInRadians">
            <summary>
Returns the statistics of all Skew values from the results 
comprising this result collection.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(Skew) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.ThetaScaleStatistics">
            <summary>
Returns the statistics of all ThetaScale values from the results 
comprising this result collection.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(ThetaScale) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.YScaleStatistics">
            <summary>
Returns the statistics of all YScale values from the results 
comprising this result collection.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(YScale) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.XScaleStatistics">
            <summary>
Returns the statistics of all XScale values from the results 
comprising this result collection.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(XScale) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.Metric">
            <summary>
Returns the type of single metric contained in this result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogMotionStageValidationMetricResults object.
This is a deep copy.
</summary>
            <param name="Info"> 
SerializationInfo. The standard serialization info argument. 
</param>
            <param name="Ctxt"> 
StreamingContext. The standard streaming context argument. 
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults.#ctor(Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults)">
            <summary>
Copy constructs a CogMotionStageValidationMetricResults object. 
This is a deep copy.
</summary>
            <param name="other"> 
CogMotionStageValidationMetricResults. The collection object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResults">
            <summary>
This class contains the validation result for a specific metric that
is computed from all suitable-subsets of UncorrectedHome2DFromStage2D 
poses that have the type of motion corresponding to that metric. It is 
composed from all CogMotionStageValidationMetricResult objects that have 
the specified metric. This class is an immutable object - its content is 
set at construction and cannot be changed. The term "suitable subsets"
is explained in the 
<see cref="T:Cognex.VisionPro.CalibFix.CogMotionStageValidator" /> class. 
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.GetEstimatedHome2DFromStage2DPoses">
            <summary>
Returns the estimated Home2DFromStage2D poses corresponding to 
the given subset of motion UncorrectedHome2DFromStage2D poses
used to compute this result.
</summary>
            <returns>
The estimated Home2DFromStage2D poses.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.GetUncorrectedHome2DFromStage2DIndices">
            <summary>
Returns the indices of the the UncorrectedHome2DFromStage2D poses
in the input UncorrectedHome2DFromStage2D array that belong to the subset 
of poses used to compute this result.
</summary>
            <returns>
The indices of the the UncorrectedHome2DFromStage2D poses.
</returns>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.ThetaResidualRMS">
            <summary>
Returns the root mean square residual around the Theta axis between 
a) the estimated Home2DFromStage2D poses and 
b) the given UncorrectedHome2DFromStage2D poses scaled by ThetaScale.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.ThetaResidualMax">
            <summary>
Returns the maximum residual in radians around the Theta axis between 
a) the estimated Home2DFromStage2D poses and 
b) the given UncorrectedHome2DFromStage2D poses scaled by ThetaScale.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.YResidualRMS">
            <summary>
Returns the root mean square residual along the Y axis between 
a) the estimated Home2DFromStage2D poses and 
b) the given UncorrectedHome2DFromStage2D poses scaled by YScale.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.YResidualMax">
            <summary>
Returns the maximum residual along the Y axis between 
a) the estimated Home2DFromStage2D poses and 
b) the given UncorrectedHome2DFromStage2D poses scaled by YScale.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.XResidualRMS">
            <summary>
Returns the root mean square residual along the X axis between 
a) the estimated Home2DFromStage2D poses and 
b) the given UncorrectedHome2DFromStage2D poses scaled by XScale.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.XResidualMax">
            <summary>
Returns the maximum residual along the X axis between a) the estimated 
Home2DFromStage2D poses and b) the given UncorrectedHome2DFromStage2D 
poses scaled by XScale.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.Skew">
            <summary>
Returns the skew in radians between the X and Y axes of the motion stage.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(Skew) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.ThetaScale">
            <summary>
Returns the scale of the motion stage Theta axis.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(ThetaScale) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.YScale">
            <summary>
Returns the scale of the motion stage Y axis.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(YScale) is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.XScale">
            <summary>
Returns the scale of the motion stage X axis.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
If HasMetric(XScale) is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.HasMetric(Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants)">
            <summary>
Returns true if whichMetric contains the metric of interest, 
false otherwise.
</summary>
            <param name="whichMetric"> 
Returns whether the type of metric specified by whichMetric is
contained in this result.
</param>
            <returns>
Boolean
</returns>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.Metric">
            <summary>
The type of single metric contained in this result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary />
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogMotionStageValidationMetricResult object.
</summary>
            <param name="Info"> 
SerializationInfo. The standard serialization info argument.
</param>
            <param name="Ctxt"> 
StreamingContext. The standard streaming context argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.Finalize">
            <summary>
Finalize this CogMotionStageValidationMetricResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.Dispose">
            <summary>
Destruct this CogMotionStageValidationMetricResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult.#ctor(Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult)">
            <summary>
Copy constructs a CogMotionStageValidationMetricResult object. 
This is a deep copy.
</summary>
            <param name="other">
CogMotionStageValidationMetricResult. The object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricResult">
            <summary>
This class contains the validation result for a specific metric that
is computed from a single set of UncorrectedHome2DFromStage2D poses. The 
same metric characterizes the motion between any pair of poses in this set
of poses. For example, for the UncorrectedHome2DFromStage2D poses 
a CogMotionStageValidationMetricResult object that contains the 
metric eXScale can be computed from the set of poses {0,1,2}, that contain 
x-translation only. It is an immutable object - its content is set at 
construction and cannot be changed.
</summary>
            <remarks>
The term "suitable subsets" is explained in the 
<see cref="T:Cognex.VisionPro.CalibFix.CogMotionStageValidator" /> class. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.GetUncorrectedHome2DFromStage2DIndices">
            <summary>
 Returns the indices of the UncorrectedHome2DFromStage2D poses in 
the input UncorrectedHome2DFromStage2D array that belong to the 
suitable-subset of poses for which the tool failed to compute
a metric-result. 
</summary>
            <returns>
The indices of the UncorrectedHome2DFromStage2D poses.
</returns>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.FailureType">
            <summary>
Returns the type of this failure.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.Metric">
            <summary>
The type of metric for which the tool failed to compute a metric-result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary />
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogMotionStageValidationFailedMetricResult 
object.
</summary>
            <param name="Info"> 
SerializationInfo. The standard serialization info argument.
</param>
            <param name="Ctxt"> 
StreamingContext. The standard streaming context argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.Finalize">
            <summary>
Finalize this CogMotionStageValidationFailedMetricResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.Dispose">
            <summary>
Destruct this CogMotionStageValidationFailedMetricResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult.#ctor(Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult)">
            <summary>
Copy constructs a CogMotionStageValidationFailedMetricResult object. 
This is a deep copy.
</summary>
            <param name="Other">
CogMotionStageValidationFailedMetricResult. The object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailedMetricResult">
            <summary>
This class contains the result of a failed attempt to compute a  
metric-result from a suitable-subset of UncorrectedHome2DFromStage2D poses.
It contains the type metric and the indices of UncorrectedHome2DFromStage2D 
poses that were used to compute this result, as well as the reason for 
failure. It is an immutable object - its content is set at construction 
and cannot be changed.
</summary>
            <remarks>
The term "suitable subsets" is explained in the 
<see cref="T:Cognex.VisionPro.CalibFix.CogMotionStageValidator" /> class. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams)">
            <summary>
This method corrects inputImage to remove distortion. The
corrected image is provided as the output and the corrected space
is added to its coordinate tree. The non-qualified name is determined
by the value of CorrectedSpaceName supplied within runParams and the
selected space name of the returned image is determined by the
SpaceToOutput supplied within runParams.
</summary>
            <param name="inputImage">
The run-time image. The computed correction space is attached to the
image's coordinate space tree. This image is corrected to remove
distortion.
</param>
            <param name="runParams">
The run-time parameters.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
Security is not enabled for this vision tool.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
inputImage is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
inputImage is not of the same type as
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.TrainingImage" />.
</exception>
            <exception cref="T:System.ArgumentException">
runParams.<see cref="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.UnfilledPelValue" />
is greater than 255 if inputImage is
<see cref="T:Cognex.VisionPro.CogImage8Grey" />,
or greater than 65535 if inputImage is
<see cref="T:Cognex.VisionPro.CogImage16Grey" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixCannotWarpException">
inputImage does not contain all the pixels required by the nonlinear
warper.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixCannotWarpException">
The transform between the selected space of inputImage and its pixels
differs by more than a whole-pixel shift from the similar
transformation object contained in the TrainingImage.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixNotCalibratedException">
If Trained is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.Untrain">
            <summary>
Eliminates the current mapping to corrected space. This method also
sets the Trained property to False, sets the computed transforms to
Nothing, and renders the object unable to run via the Execute method.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this method changes the state of this object.
The following state flags may be affected:
<list type="bullet"><item><see cref="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfTrained" /></item><item><see cref="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfGetComputedUncorrectedRootFromCorrectedTransform" /></item><item><see cref="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfGetCorrectedRootFromCorrectedTransform" /></item><item><see cref="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedImageMask" /></item><item><see cref="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedTrainingImage" /></item><item><see cref="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedTrainingImageMask" /></item></list></event>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.Train">
            <summary>
Computes the mapping to corrected space using the current
TrainingImage and related parameters. If successful, set the Trained
property to True, updates the computed transforms, and makes the object
ready to run via the Execute method.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the training is completed successfully. The event may
also fire if the training fails depending upon which training
steps were completed prior to this call to this method.
</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
Security is not enabled for this vision tool.
</exception>
            <exception cref="T:System.ArgumentNullException">
If UncorrectedRootFromRawCorrectedTransform is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixNoCalibrationImageException">
If TrainingImage is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If TrainingImage is
neither a <see cref="T:Cognex.VisionPro.CogImage8Grey" />,
nor a <see cref="T:Cognex.VisionPro.CogImage16Grey" />.
</exception>
            <exception cref="T:Cognex.VisionPro.CalibFix.CogCalibFixBadDestRectException">
If DestinationRectangle does not intersect any filled pixels of
the corrected image.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.GetCorrectedRootFromCorrectedTransform">
            <summary>
Returns the 2-D transformation that maps points from corrected space
into the root (@) space of the corrected image, if it has been
computed. Otherwise, returns Nothing. The transform is computed by
calling Train.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.GetComputedUncorrectedRootFromCorrectedTransform">
            <summary>
If Trained is true, this method returns the 2-D, minimum squared error
transformation that maps points from the (adjusted) corrected space
into uncorrected root space. Otherwise, it returns Nothing.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.GetUncorrectedPixelFromCorrectedPixelTransform(Cognex.VisionPro.ICogImage)">
            <summary>
Returns a 2-D correction transform that maps points from pixel space of
a corrected image - one created by calling Execute with the current
params - into pixel space of the given input image. Returns Nothing if
this object is untrained.
</summary>
            <remarks>
This method returns null if Trained is false.
</remarks>
            <param name="inputImage">
The input image from which the transformation is computed.
</param>
            <exception cref="T:System.ArgumentNullException">
If the inputImage argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the transform between the selected space of the inputImage and its
pixels differs by more than a whole-pixel shift from the similar
transform contained in the correction image.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedImageMask">
            <summary>
Returns the corrected image mask, if it has been computed and contains
any "Don't Care" pixels. Otherwise returns Nothing. "Don't Care"
pixels (value = 0) in this mask identify unfilled locations locations
in the runtime corrected image.
</summary>
            <value>
The default value is null.
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedTrainingImageMask">
            <summary>
Returns the corrected training image mask, if it has been computed
and contains any "Don't Care" pixels. Otherwise, returns Nothing.
"Don't Care" pixels (value = 0) in this mask identify unfilled
locations in the corrected training image.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedTrainingImage">
            <summary>
Returns the corrected training image, if it has been
computed. Otherwise, returns Nothing. This image is produced by
correcting the entire training image (ignoring the
DestinationRectangle).
</summary>
            <value>
The default value is null.
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.Trained">
            <summary>
True if all of the computed outputs of this object are meaningful, and
were computed using the current object properties. This can only
happen if the Train method is called and none of the object properties
are changed afterwards.
</summary>
            <value>
The default value is False.
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SwapCorrectedHandedness">
            <summary>
Specifies the handedness of the corrected space. When
SwapCorrectedHandedness is false, the corrected space will have the
same handedness as the raw (unadjusted) corrected space. Otherwise, it
will have the opposite handedness.
</summary>
            <value>
The default value is False.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedXAxisRotationSpace">
            <summary>
Specifies whether the CorrectedXAxisRotation property is expressed in
uncorrected space, or in raw corrected space.
</summary>
            <value>
The default value is RawCorrected.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If the new value is not in
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorAdjustmentSpaceConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedXAxisRotation">
            <summary>
The desired x-axis rotation of the corrected space, expressed in the
coordinate space specified by CorrectedXAxisRotationSpace. Corrected
space will be adjusted so that its x-axis appears at this angle (in
radians).
</summary>
            <value>
The default value is 0.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedOriginSpace">
            <summary>
Specifies whether the CorrectedOriginX and CorrectedOriginY properties
are expressed in uncorrected space, or in raw corrected space.
</summary>
            <value>
The default value is RawCorrected.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If the new value is not in
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorAdjustmentSpaceConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedOriginY">
            <summary>
The desired Y position of the corrected space origin, expressed in the
coordinate space specified by CorrectedOriginSpace. Corrected space
will be adjusted so that its origin appears at this Y position when
corrected.
</summary>
            <value>
The default value is 0.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedOriginX">
            <summary>
The desired X position of the corrected space origin, expressed in the
coordinate space specified by CorrectedOriginSpace. Corrected space
will be adjusted so that its origin appears at this X position when
corrected.
</summary>
            <value>
The default value is 0.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.DestinationRectangle">
            <summary>
Rectangle of the corrected training image that specifies what pixels
will be present in the corrected image. If the rectangle
is Nothing, all the pixels of the corrected image will be output. It
must be in '.', '@', or '#' space.
</summary>
            <value>
The default value is null.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If the selected space of the rectangle is not '.', '@', or '#' space.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedPixelRotation">
            <summary>
Specifies the rotation, in radians, of the corrected image. It is the
pixel-space angle from the x-axis of the corrected image to the x-axis of
raw corrected space. This property allows you to rotate the image
during correction.
</summary>
            <value>
The default value is 0.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.CorrectedPixelScaling">
            <summary>
Specifies an additional scaling factor to be applied during correction.
For example, a value of 2 means that the corrected image will be
approximately twice as high and twice as wide as the input image.
</summary>
            <value>
The default value is 1.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If value is less than or equal to zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.MaxErrorInPixels">
            <summary>
The maximum error allowed during image correction, measured in pixels
of the training image. It limits the error between a mathematically
perfect correction and the (much faster) one implemented by this object.
Smaller values yield more accurate correction.
</summary>
            <value>
The default value is 0.01.
</value>
            <remarks>
Changing the value of this property will cause the operator
to be become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If value is less than or equal to zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.TrainingImage">
            <summary>
Get or set the training image.
</summary>
            <value>
The default value is null.
</value>
            <remarks>
                <para>
This image is used by Train() to create a corrected training image.
The train image does not need to be a calibration image (such as
a image of checkerboard), and we recommend to use an image of
run time scene.
</para>
                <para>
Changing the value of this property will cause the operator
to be become untrained.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.UncorrectedRootFromRawCorrectedTransform">
            <summary>
Get or set the transform that maps from RawCorrected to
UncorrectedRoot.
</summary>
            <value>
The default value is null.
</value>
            <remarks>
This is the important property to set. The Train method will
throw an exception if this property is null. Changing the value
of this property will cause the operator to become untrained.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibImageCorrector object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.OnDeserialization(System.Object)">
            <summary>
Perform post-deserialization setup for this CogCalibImageCorrector.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.Finalize">
            <summary>
Finalize this CogCalibImageCorrector.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.Dispose">
            <summary>
Destruct this CogCalibImageCorrector.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.#ctor(Cognex.VisionPro.CalibFix.CogCalibImageCorrector)">
            <summary>
Copy constructs a CogCalibImageCorrector object. This is a deep copy.
</summary>
            <param name="Other">
The image corrector object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If Other is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.#ctor">
            <summary>
Default construct a CogCalibImageCorrector.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedPixelScaling">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedPixelScaling
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedPixelRotation">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedPixelRotation
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfMaxErrorInPixels">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by MaxErrorInPixels
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfDestinationRectangle">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by DestinationRectangle
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedTrainingImageMask">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedTrainingImageMask
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedTrainingImage">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedTrainingImage
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfUncorrectedRootFromRawCorrectedTransform">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by
UncorrectedRootFromRawCorrectedTransform may have
changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfTrained">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Trained
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfTrainingImage">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TrainingImage
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfSwapCorrectedHandedness">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SwapCorrectedHandedness
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfGetCorrectedRootFromCorrectedTransform">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by
GetCorrectedRootFromCorrectedTransform
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfGetComputedUncorrectedRootFromCorrectedTransform">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by
GetComputedUncorrectedRootFromCorrectedTransform
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedXAxisRotationSpace">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedXAxisRotationSpace
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedXAxisRotation">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedXAxisRotation
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedOriginY">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedOriginY
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedOriginX">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedOriginX
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedOriginSpace">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedOriginSpace
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrector.SfCorrectedImageMask">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedImageMask
may have been changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector">
            <summary>
The CogCalibImageCorrector, when trained, will produce a
corrected image at run time. This class contains both
inputs and outputs for training.
</summary>
            <remarks>
                <para>
                    <b>Images:</b>
                </para>
                <para>
                    <b>Uncorrected training image:</b> CogCalibImageCorrector.TrainingImage.
It is used as the trainingimage in CogCalibImageCorrector.Train.
</para>
                <para>
                    <b>Corrected training image:</b>
CogCalibImageCorrector.CorrectedTrainingImage. It is
produced by correcting the training image after
CogCalibImageCorrector is trained.
</para>
                <para>
                    <b>Uncorrected runtime image:</b> The input image for
CogCalibImageCorrector.Execute(ICogImage). The uncorrected runtime image
must have the same root (@) space as the uncorrected training image.
</para>
                <para>
                    <b>Corrected runtime image:</b> The output image of
CogCalibImageCorrector.Execute(ICogImage);
</para>
                <para>
                    <b>Space names:</b>
                </para>
                <para>
                    <b>Root space of an image (@):</b> See coordinate space names in
VisionPro User's Guide.
</para>
                <para>
                    <b>Pixel space of an image (#):</b> See coordinate space names in
VisionPro User's Guide.
</para>
                <para>
                    <b>Uncorrected Root:</b> The root (@) space of the uncorrected training
image. Note that the uncorrected runtime images must use the same root
space.  The only difference allowed between the uncorrected training
image's PixelFromRootTransform and the uncorrected runtime image's
PixelFromRootTransform, is a whole pixel shift i.e
TrainingImage.PixelFromRootTransform *
RuntimeImage.PixelFromRootTransform.Invert has only a whole-pixel shift.
</para>
                <para>
                    <b>UncorrectedPixel:</b> The pixel (#) space of the uncorrected
runtime image.
</para>
                <para>
                    <b>CorrectedPixel:</b> The pixel (#) space of the corrected runtime image.
It is affected by CogCalibImageCorrector.CorrectedPixelScaling,
CogCalibImageCorrector.CorrectedPixelRotation, and
CogCalibImageCorrector.DestinationRectangle. Note that CorrectedPixel
space has a linear transform from RawCorrected space.
</para>
                <para>
                    <b>CorrectedRoot:</b> The root (@) space of the corrected runtime image.
The PixelFromRootTransform of the corrected runtime image is identity.
Thus, CorrectedRoot space is identical to CorrectedPixel space.
</para>
                <para>
                    <b>Corrected:</b> A physical space which has a rigid plus handedness
transform from RawCorrected space, and the transform is decided by
CogCalibImageCorrector.CorrectedOriginSpace, CorrectedOriginX,
CorrectedOriginY, CorrectedXAxisRotationSpace, CorrectedXAxisRotation,
SwapCorrectedHandedness. Note that the transform between CorrectedRoot
space and Corrected space is a linear transform.
</para>
                <para>
                    <b>Usage examples:</b>
                </para>
                <para>
                    <b>Simple Usage</b>
                </para>
                <para>
                    <example>
                        <code lang="C#">
// Step 1:  Set the training image and the transform of camera calibration

CogCalibImageCorrector corrector = new CogCalibImageCorrector();
CogCalibImageCorrectorRunParams  runParams = new CogCalibImageCorrectorRunParams();

// The training image does not need to be a calibration image (such as a checkerboard image), 
// and we recommend you use an acquired image from your run time setup as the training image.
corrector.TrainingImage = trainImage; 

// Set the camera calibration 
corrector.UncorrectedRootFromRawCorrectedTransform  = handEyeCalibResult.GetRaw2DFromCamera2D(); 
// Where handEyeCalibResult is a CogHandEyeCalibrationResult object  

// Step 2:  Train the imageCorrector using all the default values of the remaining properties 

corrector.Train();

// After successfully training, you can check the corrected training image and the associated image 
// mask.  The mask image indicates the pixels in the corrected training image that are unfilled. 

ICogImage correctedTrainingImage = corrector.CorrectedTrainingImage;
ICogImage correctedTrainingImageMask = corrector.CorrectedTrainingImageMask;


// Step3:  Run the image corrector on an input image (uncorrected runtime image) to get the 
// corrected runtime image and the associated corrected image mask, etc.

ICogImage  correctedImage = corrector.Execute(inputImage, runParams);
// Note that inputImage must use the same @ space as the training image, and the transform from 
// pixel space of training image to the pixel space of inputImage can only have a whole pixel shift. 
// Otherwise, Execute() will  throw.
// The correctedImage will have a "Corrected" space name for the corrected space.  The selected space
//  name of the correctedImage will be "Corrected". 

// Get the associated mask image for the corrected runtime image.
ICogImage correctedImageMask = corrector.CorrectedImageMask;
</code>
                    </example>
                </para>
                <para>
                    <b>Advanced Usages</b>
                </para>
                <para>
                    <b>Change train properties (Need retraining after property change)</b>
                </para>
                <para>
                    <list type="number">
                        <item>
                            <para>
You can specify a destination rectangle, so as to reduce the
number of unfilled values in the corrected runtime image.
</para>
                            <para>
By default, all the pixels of the uncorrected runtime image
will be present in the corrected runtime image.
</para>
                            <para>
The following example uses a destination rectangle to remove
the boundary pixels in creating the corrected runtime image:
</para>
                            <para>
                                <example>
                                    <code lang="C#">
CogRectangle rect = new CogRectangle();   
rect.SetXYWidthHeight(
  corrector.CorrectedTrainingImage.Width * 0.1,
  corrector.CorrectedTrainingImage.Height * 0.1,
  corrector.CorrectedTrainingImage.Width* 0.8,
  corrector.CorrectedTrainingImage.Height * 0.8);
corrector.DestinationRectangle = rect;

corrector.Train();
</code>
                                </example>
                            </para>
                            <para>
Note that DestinationRectangle is specified using the
corrector.CorrectedTrainImage.
</para>
                        </item>
                        <item>
                            <para>
Add scaling and rotation when generating the corrected pixels.
</para>
                            <para>
By default, the corrected image has approximately the same size
as the uncorrected image. The following code changes the corrected
image to be approximately twice as high and twice as wide as the
uncorrected image:
</para>
                            <para>
                                <example>
                                    <code lang="C#">
corrector.CorrectedPixelScaling = 2.0;
corrector.Train();
</code>
                                </example>
                            </para>
                            <para>
By default, the x-axis of the corrected image aligns with the
x-axis of the RawCorrected space. The following code specifies 90
degrees rotation from the corrected image's x-axis to the
RawCorrected x-axis:
</para>
                            <para>
                                <example>
                                    <code lang="C#">
corrector.CorrectedPixelRotation = CogMisc.DegToRad(90);
corrector.Train();
</code>
                                </example>
                            </para>
                        </item>
                        <item>
Adjust the linear transform between Corrected space and CorrectedRoot
space (but does not change the CorrectedRoot space).
<list type="bullet"><item><para>
Change the origin of the Corrected space:
</para><para>
By default, the origin of the Corrected space is at the origin
of the RawCorrected space.
</para><para>
The following example uses (10, 20) in the training image's root
space as the origin of the Corrected space:
</para><para><example><code lang="C#">
corrector.CorrectedOriginSpace =
  CogCalibImageCorrectorAdjustmentSpaceConstants.UncorrectedRoot;
corrector.CorrectedOriginX = 10;
corrector.CorrectedOriginY = 20;
corrector.Train();
</code></example></para><para>
If corrector.CorrectedOriginSpace is UncorrectedRoot,
CorrectedOriginX and CorrectedOriginY are defined in
UncorrectedRoot space.
</para><para>
If corrector.CorrectedOriginSpace is RawCorrected,
CorrectedOriginX and CorrectedOriginY are defined
in RawCorrected space.
</para></item><item><para>
Change the rotation of the Corrected space:
</para><para>
By default, the x axis of the Corrected space aligns with the x axis
of the RawCorrected space.
</para><para>
The following example makes the x axis of the Corrected space appear
at 45 degree angle in UncorrectedRoot space: 
</para><para><example><code lang="C#">
corrector.CorrectedXAxisRotationSpace =
  CogCalibImageCorrectorAdjustmentSpaceConstants.UncorrectedRoot;
corrector.CorrectedXAxisRotation = CogMisc.DegToRad(45.0);
corrector.Train();        
</code></example></para><para>
If CorrectedXAxisRotationSpace is UncorrectedRoot,
CorrectedXAxisRotation is defined in UnCorrectedRoot space.
</para><para>
If CorrectedXAxisRotationSpace is RawCorrected, CorrectedXAxisRotation
is defined in RawCorrected space.
</para></item><item><para>
Change the handedness of the Corrected space.
</para><para>
By default, the Corrected space has the same handedness as the
RawCorrected space. The following example makes the Corrected space
have the opposite handedness as the RawCorrected space:
</para><para><example><code lang="C#">
corrector.SwapCorrectedHandedness = true;
corrector.Train();
</code></example></para><para>
After changing the above properties and training, you can get back
and check the transform between Corrected space and
CorrectedRoot space:
</para><para><example><code lang="C#">
CogTransform2DLinear linearTransform =                      
  corrector.GetCorrectedRootFromCorrectedTransform();
</code></example></para></item></list></item>
                    </list>
                </para>
                <para>
                    <b>Change the run parameters (CogCalibImageCorrectorRunParams)</b>
                </para>
                <para>
                    <list type="number">
                        <item>
                            <para>
Change the coordinate space name in the corrected runtime image's
coordinate space tree.
</para>
                            <para>
By default, the name of the Corrected space in the corrected runtime
image's coordinate space tree is "Corrected". You can change it to a
new name:
</para>
                            <para>
                                <example>
                                    <code lang="C#">
runParams.CorrectedSpaceName = "NewCorrectedSpaceName";
</code>
                                </example>
                            </para>
                            <para>
The corrected runtime image's coordinate space tree will use
this space name for the Corrected space.
</para>
                        </item>
                        <item>
                            <para>
Change the setting for the SelectedSpaceName of the corrected
runtime image.
</para>
                            <para>
By default, the selected space of the corrected runtime image
is the Corrected space, you can change it to CorrectedRoot
space by using the following:
</para>
                            <para>
                                <example>
                                    <code lang="C#">
runParams.SpaceToOutput =
  CogCalibImageCorrectorSpaceToOutputConstants.CorrectedRoot;
</code>
                                </example>
                            </para>
                        </item>
                        <item>
                            <para>
Change the pixel values for the unfilled pixels in the corrected
runtime image.
</para>
                            <para>
By default, all the unfilled pixels in the corrected runtime
image are set to a value of 128. The following example will
set all the unfilled pixels in the corrected
runtime image to a value of 0:
</para>
                            <para>
                                <example>
                                    <code lang="C#">
runParams.UnfilledPelValueEnabled = true;
runParams.UnfilledPelValue = 0;
</code>
                                </example>
                            </para>
                        </item>
                    </list>
                </para>
                <para>
                    <b>Get the various transforms between the uncorrected images
and the corrected images</b>
                </para>
                <para>
After training, you can get the transform between the pixel
space of the uncorrected image and the pixel space of the
corrected image:  
</para>
                <para>
                    <example>
                        <code lang="C#">
ICogTransform2D uncorrectedPixelFromCorrectedPixel =
  corrector.GetUncorrectedPixelFromCorrectedPixelTransform(inputImage);
</code>
                    </example>
                </para>
                <para>
After training, you can also get the transform between the root
space of the uncorrected image and the Corrected space of the
corrected runtime image:
</para>
                <para>
                    <example>
                        <code lang="C#">
ICogTransform2D  uncorrectedRootFromCorrected = 
  corrector.GetComputedUncorrectedRootFromCorrectedTransform();
</code>
                    </example>
                </para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.SpaceToOutput">
            <summary>
Specifies whether the selected space of the corrected image will
be a fully-qualified copy of the corrected space name, or "@".
</summary>
            <value>
The default is Corrected.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
The supplied value is not in
CogCalibImageCorrectorSpaceToOutputConstants.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.CorrectedSpaceName">
            <summary>
Name of the corrected coordinate space that will be attached to the
coordinate space tree of the corrected image. This must be a valid
non-qualified name.
</summary>
            <value>
The default is "Corrected".
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentNullException">
The supplied value is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.UnfilledPelValue">
            <summary>
If UnfilledPelValueEnabled is true, unfilled pixels in the corrected
image will be set to this value. Otherwise, this value is ignored.
Unfilled pixels can only occur in an image produced by nonlinear
correction.
</summary>
            <value>
The default is 128.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The supplied value is less than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.UnfilledPelValueEnabled">
            <summary>
If true, unfilled pixels in the corrected image will be initialized
using UnfilledPelValue. Otherwise unfilled pixels will be
uninitialized. Unfilled pixels can only occur in an image
produced by nonlinear correction.
</summary>
            <value>
The default is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibImageCorrectorRunParams object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.Finalize">
            <summary>
Finalize this CogCalibImageCorrectorRunParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.Dispose">
            <summary>
Destruct this CogCalibImageCorrectorRunParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.#ctor(Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams)">
            <summary>
Copy constructs a CogCalibImageCorrectorRunParams object.
This is a deep copy.
</summary>
            <param name="Other">
The CogCalibImageCorrectorRunParams object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.#ctor">
            <summary>
This constructor creates a default CogCalibImageCorrectorRunParams
object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.SfSpaceToOutput">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SpaceToOutput
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.SfCorrectedSpaceName">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CorrectedSpaceName
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.SfUnfilledPelValue">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by UnfilledPelValue
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams.SfUnfilledPelValueEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by UnfilledPelValueEnabled
may have been changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorRunParams">
            <summary>
The CogCalibImageCorrectorRunParams class controls the CogImageCorrector's
creation of corrected runtime images.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CogTransform2DCameraCalibration[])">
            <summary>
Reuse the internal camera parameters (from the supplied 
camera calibration results of the remote cameras) to compute CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on 
the supplied corresponded point pairs  extracted from images of
the separate calibration plates being shuffled between primary station and remote station
captured with remote cameras, pelrects of remote cameras, and uncorrectedHome2DFromStage2D poses. This overload performs a full hand 
eye calibration on the remote station so that it doesn't require that the remote cameras and primary 
cameras to have overlapped/connected plate features in their FOVs when moving the calibration plates between
primary station and remote station (via the highly repeatable motions).
</summary>
            <remarks>
                <para>
The purpose of this
overload is to support moving previously-calibrated cameras
and calibrating the camera extrinsic poses using potentially sparse
feature correspondences.
</para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, the cameras' extrinsic parameters
changes such as in-plane rotation and translation, are to be expected. 
Small changes to non-in-plane rotation and translation that cause changes in 
perspective are also allowed.
</item></list></para>
            </remarks>
            <param name="remoteCamerasCrsps">
The corresponded point pairs for the remote cameras.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras, used to extract the corresponded point pairs. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.  
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage before the remote cameras acquired the images that provided  the corresponded
point pairs.  
</param>
            <param name="remoteCameraRaw2DFromCamera2Ds">
The pre-calibrated remote cameras' calibration results, which is expected to have 
better accuracy. Only  
the intrinsic parameters of input camera calibrations are kept during 
computing the hand-eye calibration, while the extrinsic parameter are 
recalculated based on the corresponded point pairs.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCameraResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCameraResults object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasCrsps argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCameraRaw2DFromCamera2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
The number of poses in remoteCamerasCrsps is different
from the number of items in uncorrectedHome2DFromStage2Ds.
</item><item>
The number of cameras in remoteCamerasCrsps is different
from the number of items in remoteCamerasPelRects.
</item><item>
The number of cameras in remoteCameraRaw2DFromCamera2Ds is different
from the number of items in remoteCamerasPelRects.
</item><item>
The number of cameras in remoteCamerasCrsps is inconsistent
in different poses.
</item><item>
The handedness flip between camera and plate is inconsistent
in different poses.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than 1.0 degrees.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasCrsps
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The Raw2DFromCamera2D transform for any of the items
in remoteCameraRaw2DFromCamera2Ds is null.
</item><item>
If the supplied remoteCameraRaw2DFromCamera2Ds is using a lens 
distortion model different from the one set in this calibrator.
</item></list></exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[])">
            <summary>
Compute the CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on 
the supplied the corresponded point pairs extracted from images of
the separate calibration plates being shuffled between primary station and remote station
captured with remote cameras, pelrects of remote cameras, and unCorrectedHome2DFromStage2Ds poses. This overload performs a full hand 
eye calibration on the remote station so that it doesn't  require that the remote cameras and primary 
cameras to have overlapped or connected plate features in their FOVs when moving the calibration plates between
primary station and remote station (via the highly repeatable motions).
</summary>
            <remarks>
                <para>
Currently, The only supported stage MotionCapability <see cref="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability" /> 
is RotationAndTranslation2Axes. Any other stage MotionCapability  will cause exception.
</para>
            </remarks>
            <param name="remoteCamerasCrsps">
The corresponded point pairs for the remote cameras.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras, used to extract the corresponded point pairs. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.  
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage before the remote cameras acquired the images that provided  the corresponded
point pairs.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCamerasResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCamerasResult object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasCrsps argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
The number of poses in remoteCamerasCrsps is different
from the number of items in uncorrectedHome2DFromStage2Ds.
</item><item>
The number of cameras in remoteCamerasCrsps is different
from the number of items in remoteCamerasPelRects.
</item><item>
The number of cameras in remoteCamerasCrsps is inconsistent
in different poses.
</item><item>
The handedness flip between camera and plate is inconsistent
in different poses.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than 1.0 degree.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasCrsps
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CogTransform2DCameraCalibration[])">
            <summary>
Reuse the internal camera parameters (from the supplied 
camera calibration results of the remote cameras) to compute the 
CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on the supplied
tracked feature points
on a part from the remote station, pelrects of the remote camera, and uncorrectedHome2DFromStage2D poses.
This overload performs a full hand 
eye calibration on the remote station so that it doesn't require that the remote cameras and primary 
cameras to have overlapped tracked features in their FOVs when moving the part between
primary station and remote station (via the highly repeatable motions).
</summary>
            <remarks>
                <para>
The purpose of this overload is to support moving previously-calibrated 
cameras and
calibrating the camera extrinsic poses using potentially sparse feature correspondences.
</para>
                <para>
Currently, The only supported stage MotionCapability <see cref="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability" /> 
is RotationAndTranslation2Axes. Any other stage MotionCapability  will cause exception.
</para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, the cameras' extrinsic parameters
changes such as in-plane rotation and translation, are to be expected. 
Small changes to non-in-plane rotation and translation that cause changes in 
perspective are also allowed.
</item></list></para>
            </remarks>
            <param name="remoteCamerasTrackedRaw2DFeatures">
The tracked Raw2D feature positions from the images acquired by the remote cameras.Each tracked Raw2D feature includes x,y coordinate and a validation value.
For different poseID of i, remoteCamerasTrackedRaw2DFeatures[i][cameraID][featureID] (with the same cameraID and featureID) should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.  
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage before the remote cameras acquired the images that provided the tracked Raw2D  
features.
</param>
            <param name="remoteCameraRaw2DFromCamera2Ds">
The remote cameras' previously computed calibration results which are 
expected to have better accuracy (e.g., using calibration plate). The intrinsic parameters of
input camera calibrations are kept during computing the hand-eye calibration,
while the extrinsic parameter are recalculated based on the tracked Raw2D features.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCamerasResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCamerasResult object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasTrackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCameraRaw2DFromCamera2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
                <item>
The Raw2DFromCamera2D transform for any of the items
in remoteCameraRaw2DFromCamera2Ds is null.
</item>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
remoteCamerasTrackedRaw2DFeatures.Count != uncorrectedHome2DFromStage2Ds.Count
</item><item>
remoteCamerasTrackedRaw2DFeatures[i].Count != remoteCamerasPelRects.Count for any pose i
</item><item>
remoteCamerasTrackedRaw2DFeatures[i1][j].Count != remoteCamerasTrackedRaw2DFeatures[i2][j].Count for any j.
</item><item>
remoteCamerasPelRects.Count != remoteCameraRaw2DFromCamera2Ds.Count.
</item><item>
Inconsistent handedness flip identified in different poses 
for the same camera.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than 1.0 degree.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasTrackedRaw2DFeatures parameter
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied remoteCameraRaw2DFromCamera2Ds is using a lens 
distortion model different from the one set in this calibrator.
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[])">
            <summary>
Compute the CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on
the supplied tracked feature points
on a part from the remote station, pelrects of the remote cameras, and uncorrectedHome2DFromStage2D poses.
This overload performs a full hand 
eye calibration on the remote station so that it doesn't require that the remote cameras and primary 
cameras to have overlapped tracked features in their FOVs when moving the part between
primary station and remote station (via the highly repeatable motions).
</summary>
            <remarks>
                <para>
Currently, The only supported stage MotionCapability <see cref="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability" /> 
is RotationAndTranslation2Axes. Any other stage MotionCapability  will cause exception.
</para>
            </remarks>
            <param name="remoteCamerasTrackedRaw2DFeatures">
The tracked Raw2D feature positions from the images acquired by the remote cameras. Each tracked Raw2D feature includes x,y coordinates and a validation value.
For different poseID of i, remoteCamerasTrackedRaw2DFeatures[i][cameraID][featureID] (with the same cameraID and featureID) should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.  
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage before the remote cameras acquired the images that provided the tracked Raw2D 
features.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCamerasResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCameraResult object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasTrackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
remoteCamerasTrackedRaw2DFeatures.Count != uncorrectedHome2DFromStage2Ds.Count
</item><item>
remoteCamerasTrackedRaw2DFeatures[i].Count != remoteCamerasPelRects.Count for any pose i
</item><item>
remoteCamerasTrackedRaw2DFeatures[i1][j].Count != remoteCamerasTrackedRaw2DFeatures[i2][j].Count for any j.
</item><item>
Inconsistent handedness flip identified in different poses 
for the same camera.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than 1.0 degree.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasTrackedRaw2DFeatures parameter
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults,Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,Cognex.VisionPro.CogTransform2DCameraCalibration[])">
            <summary>
Reuse the internal camera parameters (from the supplied 
camera calibration results of the remote cameras) to compute
the CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on the 
supplied hand-eye calibration results of the primary cameras, the tracked feature points
on a part from both primary station and remote station, pelrects of remote camera. 
<para>
Note that it requires the primary cameras and remote cameras must have overlapped tracked features
in their FOVs when moving the part between primary station and remote station (via the highly repeatable motions).
</para><para>
Note that the tracked Raw2D features' order must be the same over all primary/remote cameras and over all poses.
</para></summary>
            <remarks>
                <para>
The purpose of this overload is to support previously-calibrated remote 
cameras, and calibrating 
the camera extrinsic poses using potentially sparse feature correspondences.  
</para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, the cameras' extrinsic parameters
changes such as in-plane rotation and translation, are to be expected. 
Small changes to non-in-plane rotation and translation that cause changes in 
perspective are also allowed.
</item></list></para>
            </remarks>
            <param name="primaryCamerasCalibResults">
The primary cameras' hand-eye calibration results.
</param>
            <param name="primaryCamerasTrackedRaw2DFeatures">
The tracked Raw2D feature positions from the images acquired by the primary cameras. Each tracked Raw2D feature includes x,y coordinates and a validation value.
For different poseID of i, primaryCamerasTrackedRaw2DFeatures[i][cameraID][featureID] (with the same cameraID and featureID) should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.
</param>
            <param name="remoteCamerasTrackedRaw2DFeatures">
The tracked Raw2D feature positions from the images acquired by the remote cameras. Each tracked Raw2D feature includes x,y coordinates and a validation value.
For different poseID of i, remoteCamerasTrackedRaw2DFeatures[i][cameraID][featureID] (with the same cameraID and featureID) should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="remoteCameraRaw2DFromCamera2Ds">
The remote cameras' previously computed calibration results which are 
expected to have better accuracy (e.g., using calibration plate). The intrinsic parameters of
input camera calibrations are kept during computing the hand-eye calibration,
while the extrinsic parameter are recalculated based on the tracked Raw2D features.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCameraResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCameraResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasCalibResults argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasTrackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasTrackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCameraRaw2DFromCamera2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
                <item>
The Raw2DFromCamera2D transform for any of the items
in remoteCameraRaw2DFromCamera2Ds is null.
</item>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
primaryCamerasTrackedRaw2DFeatures[i].Count != primaryCamerasCalibResults.Count for any pose i.
</item><item>
primaryCamerasTrackedRaw2DFeatures.Count != remoteCamerasTrackedRaw2DFeatures.Count
</item><item>
remoteCamerasTrackedRaw2DFeatures[i].Count != remoteCamerasPelRects.Count for any pose i
</item><item>
primaryCamerasTrackedRaw2DFeatures[i1][j].Count != primaryCamerasTrackedRaw2DFeatures[i2][j].Count for any j.
</item><item>
remoteCamerasTrackedRaw2DFeatures[i1][j].Count != remoteCamerasTrackedRaw2DFeatures[i2][j].Count for any j.
</item><item>
remoteCamerasTrackedRaw2DFeatures[i].Count != remoteCameraRaw2DFromCamera2Ds.Count for any pose i.
</item><item>
primaryCamerasTrackedRaw2DFeatures[i1][j1].Count != remoteCamerasTrackedRaw2DFeatures [i2][j2].Count for any i1, j1, i2, j2.  
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasTrackedRaw2DFeatures argument falls outside
its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied remoteCameraRaw2DFromCamera2Ds is using a lens 
distortion model different from the one set in this calibrator.
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults,Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses)">
            <summary>
Compute the CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on 
the supplied  hand-eye calibration results of the primary cameras, the tracked feature points
on a part from both primary station and remote station, and pelrects of remote cameras.
<para>
Note that it requires the primary cameras and remote cameras must have overlapped tracked features
in their FOVs when moving the part between primary station and remote station (via the highly repeatable motion).
</para><para>
Note that the tracked Raw2D features' order must be the same over all primary/remote cameras and over all poses.
</para></summary>
            <param name="primaryCamerasCalibResults">
The primary cameras' hand-eye calibration results.
</param>
            <param name="primaryCamerasTrackedRaw2DFeatures">
The tracked Raw2D feature positions from the images acquired by the primary cameras. Each tracked Raw2D feature includes x,y coordinates and a validation value.
For different poseID of i, primaryCamerasTrackedRaw2DFeatures[i][cameraID][featureID] (with the same cameraID and featureID) should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.
</param>
            <param name="remoteCamerasTrackedRaw2DFeatures">
The tracked Raw2D feature positions from the images acquired by the remote cameras. Each tracked Raw2D feature includes x,y coordinates and a validation value.
For different poseID of i, remoteCamerasTrackedRaw2DFeatures[i][cameraID][featureID] (with the same cameraID and featureID) should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.  
</param>
            <returns>
A CogHandEyeCalibrationRemoteCameraResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCameraResult object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasCalibResults argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasTrackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasTrackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
primaryCamerasTrackedRaw2DFeatures[i].Count != primaryCamerasCalibResults.Count for any pose i.
</item><item>
primaryCamerasTrackedRaw2DFeatures.Count != remoteCamerasTrackedRaw2DFeatures.Count
</item><item>
remoteCamerasTrackedRaw2DFeatures[i].Count != remoteCamerasPelRects.Count for any pose i
</item><item>
primaryCamerasTrackedRaw2DFeatures[i1][j].Count != primaryCamerasTrackedRaw2DFeatures[i2][j].Count for any j.
</item><item>
remoteCamerasTrackedRaw2DFeatures[i1][j].Count != remoteCamerasTrackedRaw2DFeatures[i2][j].Count for any j.
</item><item>
primaryCamerasTrackedRaw2DFeatures[i1][j1].Count != remoteCamerasTrackedRaw2DFeatures [i2][j2].Count for any i1, j1, i2, j2.  
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasTrackedRaw2DFeatures argument falls outside
its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults,Cognex.VisionPro.CogFeatureCrspsMCameras,System.Drawing.Rectangle[],Cognex.VisionPro.CogFeatureCrspsMCameras,Cognex.VisionPro.CogTransform2DCameraCalibration[])">
            <summary>
Reuse the internal camera parameters (from the supplied 
camera calibration results of the remote cameras) to compute the 
CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on 
the supplied hand-eye calibration results of the primary cameras, the corresponded
point pairs (from the same calibration plate) for the primary cameras and the remote cameras, 
pelrects of the remote cameras, using the current parameter settings.
</summary>
            <remarks>
                <para>
The purpose of this overload is to support previously-calibrated remote 
cameras, and calibrating 
the camera extrinsic poses using potentially sparse feature correspondences.
</para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, the cameras' extrinsic parameters
changes such as in-plane rotation and translation, are to be expected. 
Small changes to non-in-plane rotation and translation that cause changes in 
perspective are also allowed.
</item></list></para>
            </remarks>
            <param name="primaryCamerasCalibResults">
The primary cameras' hand-eye calibration results.
</param>
            <param name="primaryCamerasCrsps">
The corresponded point pairs for the primary cameras.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras, used to extract the corresponded point pairs. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.
</param>
            <param name="remoteCamerasCrsps">
The corresponded point pairs for the remote cameras.
</param>
            <param name="remoteCameraRaw2DFromCamera2Ds">
The remote cameras' previously computed calibration results which are 
expected to have better accuracy (e.g., using calibration plate). The intrinsic parameters of
input camera calibrations are kept during computing the hand-eye calibration,
while the extrinsic parameter are recalculated based on the corresponded point pairs.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCameraResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCameraResult object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasCalibResults argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasCrsps argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasCrsps argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCameraRaw2DFromCamera2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
                <item>
The Raw2DFromCamera2D transform for any of the items
in remoteCameraRaw2DFromCamera2Ds is null.
</item>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
The number of primary cameras described by primaryCamerasCrsps is different
from the number of items in primaryCamerasCalibResults.
</item><item>
The number of remote cameras described by remoteCamerasCrsps is different
from the number of items in remoteCameraRaw2DFromCamera2Ds.
</item><item>
The number of remote cameras described by remoteCamerasPelRects is different
from the number of items in remoteCamerasCrsps.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasCrsps argument falls outside
its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied remoteCameraRaw2DFromCamera2Ds is using a lens 
distortion model different from the one set in this calibrator.
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Execute(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults,Cognex.VisionPro.CogFeatureCrspsMCameras,System.Drawing.Rectangle[],Cognex.VisionPro.CogFeatureCrspsMCameras)">
            <summary>
Compute the CogHandEyeCalibrationRemoteCamerasResults for the remote cameras based on 
the supplied hand-eye calibration results of the primary cameras, the corresponded
point pairs (from the same calibration plate) for the primary cameras and the remote cameras, 
pelrects of the remote cameras, using the current parameter settings.
</summary>
            <param name="primaryCamerasCalibResults">
The primary station hand-eye calibration results.
</param>
            <param name="primaryCamerasCrsps">
The corresponded point pairs for primary cameras.
</param>
            <param name="remoteCamerasPelRects">
The pelrects of the remote cameras, used to extract the corresponded point pairs. 
There should be one pelrect for each camera. 
There is no relationship
between the pelrects of two separate cameras. It is used to define
the camera coordinate system (i.e. Camera2D) to be at the
center of the pelrect.
</param>
            <param name="remoteCamerasCrsps">
The corresponded point pairs for the remote cameras.
</param>
            <returns>
A CogHandEyeCalibrationRemoteCameraResults containing the results of the
calibration, i.e. a CogHandEyeCalibrationRemoteCameraResult object for each remote camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasCalibResults argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the primaryCamerasCrsps argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasPelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the remoteCamerasCrsps argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
The number of cameras described by primaryCamerasCrsps is different
from the number of items in primaryCamerasCalibResults.
</item><item>
The number of cameras described by remoteCamerasPelRects is different
from the number of items in remoteCamerasCrsps.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature position in the remoteCamerasCrsps argument falls outside
its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Timeout">
            <summary>
The maximum time in milliseconds that the Execute method
will be allowed to run if TimeoutEnabled is true.
</summary>
            <value>
The default is the 120000.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The supplied value is less than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.TimeoutEnabled">
            <summary>
Enable or disable timeout for the Execute methods.
</summary>
            <value>
The default is False.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.DistortionModel">
            <summary>
The optical distortion model to be used in computing
Raw2DFromCamera2D.
</summary>
            <value>
The default is <see cref="T:Cognex.VisionPro.CogLensDistortionModelConstants">ThreeParamRadial</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of the
CogLensDistortionModelConstants enumeration.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibratorRemoteCameras object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Finalize">
            <summary>
Finalize this CogHandEyeCalibratorRemoteCameras.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.Dispose">
            <summary>
Destruct this CogHandEyeCalibratorRemoteCameras.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.#ctor(Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras)">
            <summary>
Copy constructs a CogHandEyeCalibratorRemoteCameras object.
</summary>
            <param name="Other">
The calibrator object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.#ctor">
            <summary>
This constructor creates a default CogHandEyeCalibratorRemoteCameras object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.SfTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Timeout
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.SfTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TimeoutEnabled
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras.SfDistortionModel">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by DistortionModel
may have been changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibratorRemoteCameras">
            <summary>
The CogHandEyeCalibratorRemoteCameras class performs a hand-eye 
calibration between one or more remote cameras and a motion stage.
</summary>
            <remarks>
                <para>
The CogHandEyeCalibratorRemoteCameras computes the mathematical
transform to map image coordinate positions of remote cameras 
to and from their
corresponding coordinates in the coordinate system defined by the
motion axes of the stage. This is a 2-D transform. This operator
provides no 3-D information.
</para>
                <para>
The remote camera is always a stationary camera, the physical
position of the cameras remains unchanged when the motion stage
moves. 
</para>
                <para>
                    <b>Coordinate Systems, Stage Pose and Systematic Errors in the Motion Stage </b>
See Remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator" /></para>
                <para>
The figure below shows the result of adding a remote camera (camera C) to an 
already calibrated system consisting of 2 primary cameras (camera A and 
camera B), using a single large calibration target that is simultaneously 
visible by all cameras. In this case the relative position of cameraC2D from
Home2D reflects the actual spatial relationship of the system.
</para>
                <para>
                    <code>
 remote camera                           primary cameras
---------------                        -------------------
  camera C                    camera A                     camera B
    __                           __                           __
   |__|                         |__|                         |__|
    /\                           /\                           /\ 
                                                            

   ______________single_calibration_target_____________________________
  |                                             Plate2D                |
  |                                             +-----&gt;                |
  |                                             |                      |
  |                                             |                      |
  |                                             V                      |
  |____________________________________________________________________|

  cameraC2D                  cameraA2D                      cameraB2D     
     +-----&gt;                     +-----&gt;                    +-----&gt;
     |                           |                          |
     |                           |                          |
     V                           V                          V

                                             Home2D
                                              +-----&gt;                                 
                                              |                         
                                              |                           
                                              V                           


</code>
                </para>
                <para>
The figure below shows the result of adding a remote camera (camera C) to an 
already calibrated system consisting of 2 primary cameras (camera A and 
camera B), using a single calibration target that is moved into the field of 
view of each camera (via the highly repeatable motions between the stations, which is 
the same  motion applied on the run time part between the stations). 
In this case the relative position of cameraC2D from
Home2D does not reflect the actual spatial configuration of the system.
This mode of operation is particularly useful if the remote cameras are 
far away or not on the same physical plane. 
</para>
                <para>
                    <code>
 remote camera                              primary cameras
---------------                             -------------------
  camera C                                  camera A      camera B
    __                                          __          __
   |__|                                        |__|        |__|
    /\                                          /\          /\ 
                                                            

   _______________                            ________________
  |  Plate2D      |     Moved into field     |  Plate2D       |
  |  +-----&gt;      |         of view          |  +-----&gt;       |
  |  |            |     -----------------    |  |             |
  |  |            |                          |  |             |
  |  V            |                          |  V             |
  |_______________|                          |________________|

                             cameraA2D         cameraC2D     cameraB2D     
                                 +-----&gt;        +-----&gt;      +-----&gt;
                                 |              |            |
                                 |              |            |
                                 V              V            V

                                             Home2D                  
                                              +-----&gt;                              
                                              |                          
                                              |                            
                                              V       
</code>
                </para>
                <para>
The figure below shows the result of adding a remote camera (camera C) to an 
already calibrated system consisting of 2 primary cameras (camera A and 
camera B), using a run time part that is moved into the field of 
view of the cameras at each station (via the highly repeatable motions between the stations). 
Tracked Raw2D feature based calibration can be used.
In this case the relative position of cameraC2D from
Home2D does not reflect the actual spatial configuration of the system.
This mode of operation is particularly useful if the remote cameras are 
far away or not on the same physical plane, and it is not feasible to move a  
calibration plate between the stations.
</para>
                <para>
                    <code>
              remote camera                           primary cameras
              ---------------                         -------------------
                 camera C                             camera A        camera B
                     __                                  __               __
                    |__|                                |__|             |__|
                     /\                                  /\               /\ 
                                                            

          ____               _____                       ____               _____       
         /    \             /     \                     /    \             /     \ 
        /     * \          /  *   |                    /     * \          /  *   |  
       /   *    /_________/    *  |  Moved into field /   *    /_________/    *  |  
       |\___                    __/|     of view      |\___                    __/|
        \__/   Runtime part    /___/                   \__/   Runtime part    /___/
          /(Calibration Object)//   -----------------    /(Calibration Object)//
   ______/                    //                  ______/                    //
  /       _____________       *\                 /        _____________        *\ 
 /  *  * /_____________\    *   /|              /  *  *  / ___________  \   *   /|
|\_______//             \\______//              |\_______//             \\______//
 \_______/               \______/                \_______/               \______/

                             cameraA2D         cameraC2D     cameraB2D     
                                 +-----&gt;        +-----&gt;      +-----&gt;
                                 |              |            |
                                 |              |            |
                                 V              V            V

                                             Home2D                  
                                              +-----&gt;                              
                                              |                          
                                              |                            
                                              V       
</code>
                </para>
                <para>
The above usages require that the primary cameras and remote cameras must have overlapped or connected features
in their FOVs when moving the calibration plate(s) or part between the primary station and the remote station (via the highly repeatable motion).
If this is not the case,  CogHandEyeCalibratorRemoteCameras also supports full hand-eye calibration for the remote cameras 
using multiple stage poses.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.ComputeRaw2DFromCamera2Ds(System.Drawing.Rectangle[],Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,Cognex.VisionPro.CogLensDistortionModelConstants,System.Double[][]@,System.Double[][]@,System.Double[][]@,System.Double[][]@)">
            <summary>
Compute camera calibration (Raw2DFromCamera2D) for all cameras using a group of
calibration feature correspondences from different calibration plate poses.
</summary>
            <param name="pelRects">
The pelrects used to extract the corresponded point pairs. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="correspondedPointPairsForMCameraNPoses">
The corresponded point pairs to be processed.
</param>
            <param name="distortionModel">
The lens distortion model used for camera calibration.
</param>
            <param name="rmsErrsRaw2D">
The rms errors in Raw2D for the calibration results, indexed first by camera, then by view (plate pose).
</param>
            <param name="maxErrsRaw2D">
The maximum errors in Raw2D for the calibration results, indexed first by camera, then by view (plate pose).
</param>
            <param name="rmsErrsPlate2D">
The rms errors in Plate2D for the calibration results, indexed first by camera, then by view (plate pose).
</param>
            <param name="maxErrsPlate2D">
The maximum errors in Plate2D for the calibration results, indexed first by camera, then by view (plate pose).
</param>
            <returns>
A set of CogTransform2DCameraCalibration objects which maps between Raw2D  
and Camera2D for all cameras.
</returns>
            <exception cref="T:System.ArgumentNullException">
If correspondedPointPairsForMCameraNPoses or pelRects is null.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
correspondedPointPairsForMCameraNPoses is empty.
</item><item>
pelRects.Count == 0 is true.
</item><item>
correspondedPointPairsForMCameraNPoses[i].Count != pelRects.Count for any plate pose i.
</item><item>
The supplied distortionModel is not a member of the
CogLensDistortionModelConstants enumeration.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
if any calibration feature falls outside its corresponding image window.
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerated, or if correspondedPointPairsForMCameraNPoses does not 
contain sufficient data to support a successful camera 
calibration.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.ComputeRaw2DFromCamera2D(System.Int32,System.Drawing.Rectangle,Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,Cognex.VisionPro.CogLensDistortionModelConstants,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
Compute camera calibration ( Raw2DFromCamera2D) for a camera using a group of
calibration feature correspondences from different calibration plate poses.
</summary>
            <param name="cameraIndex">
The camera index which indicates which camera will be calibrated in 
parameter correspondedPointPairsForMCameraNPoses.
</param>
            <param name="pelRect">
The pelrect used to extract the corresponded point pairs. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="correspondedPointPairsForMCameraNPoses">
The corresponded point pairs to be processed.
</param>
            <param name="distortionModel">
The lens distortion model used for camera calibration.
</param>
            <param name="rmsErrRaw2D">
The rms errors in Raw2D for the calibration result, indexed by view (plate pose).
</param>
            <param name="maxErrRaw2D">
The maximum errors in Raw2D for the calibration result, indexed by view (plate pose).
</param>
            <param name="rmsErrPlate2D">
The rms errors in Plate2D for the calibration result, indexed by view (plate pose).
</param>
            <param name="maxErrPlate2D">
The maximum errors in Plate2D for the calibration result, indexed by view (plate pose).
</param>
            <returns>
A CogTransform2DCameraCalibration containing the result of the
Raw2DfromCamera2D transform for the specified camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If correspondedPointPairsForMCameraNPoses is null.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
correspondedPointPairsForMCameraNPoses is empty.
</item><item>
cameraIndex &lt; 0 or cameraIndex &gt;= correspondedPointPairsForMCameraNPoses[0].Count
</item><item>
correspondedPointPairsForMCameraNPoses[i].Count != correspondedPointPairsForMCameraNPoses[j].Count 
for any plate pose i and j.
</item><item>
The supplied distortionModel is not a member of the
CogLensDistortionModelConstants enumeration.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
if any calibration feature falls outside its corresponding image window.
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerated, or if correspondedPointPairsForMCameraNPoses[cameraIndex] does not 
contain sufficient data to support a successful camera
calibration.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Execute(Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CogTransform2DCameraCalibration[])">
            <summary>
Recompute the CogHandEyeCalibrationResults for the supplied 
trackedRaw2DFeatures, pelrects, and UncorrectedHome2DFromStage2D poses, 
reusing intrinsics parameter from the input raw2DFromCamera2Ds
and recompute the extrinsic parameter.
</summary>
            <remarks>
                <para>
The purpose of this overload is to support calibrating cameras whose 
mounting positions have been changed since previous calibration, 
using potentially sparse feature correspondences.
</para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, there could be some
changes to the cameras' extrinsic parameters in-plane rotation 
and translation, there might also be some changes in perspective.
</item></list></para>
            </remarks>
            <param name="trackedRaw2DFeatures">
Tracked Raw2D feature position points. Each feature includes x,y coordinate and a validation value.
For different poseID: i, trackedRaw2DFeatures[i][cameraID][featureID] should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="pelRects">
The pelrects of the cameras. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage when the images that provided the tracked Raw2D 
features were acquired.
</param>
            <param name="raw2DFromCamera2Ds">
The previously computed calibration results which is expected to have 
better accuracy (e.g., using calibration plate). The intrinsic parameters of
input camera calibrations are kept during computing the hand-eye calibration,
while the extrinsic parameter are recalculated based on the tracked Raw2D features.
</param>
            <returns>
A CogHandEyeCalibrationResults containing the results of the
analysis, i.e. a CogHandEyeCalibrationResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the trackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the raw2DFromCamera2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
trackedRaw2DFeatures.Count != uncorrectedHome2DFromStage2Ds.Count
</item><item>
trackedRaw2DFeatures[i].Count != pelRects.Count for any pose i
</item><item>
trackedRaw2DFeatures[i1][j].Count != trackedRaw2DFeatures[i2][j] for any j.
</item><item>
Home2DUnitLengthReference != UseMotionStage
</item><item>
Inconsistent handedness flip identified in different poses 
for the same camera.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationOnly and any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different translation components.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
All elements of uncorrectedHome2DFromStage2Ds have exactly the
same translation component.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature point in the trackedRaw2DFeatures 
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The Raw2DFromCamera2D transform for any of the items
in raw2DFromCamera2Ds is null.
</item><item>
The number of cameras represented by the raw2DFromCamera2Ds
argument does not match the number of items in the
pelRects argument.
</item><item>
If the supplied raw2DFromCamera2Ds is using a lens 
distortion model different from the one set in the calibrator.
</item></list></exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Execute(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CogTransform2DCameraCalibration[])">
            <summary>
Recompute the CogHandEyeCalibrationResults for the supplied
corresponded point pairs, pelrects, and
UncorrectedHome2DFromStage2D poses,
reusing each camera's intrinsics parameters from the input raw2DFromCamera2Ds
and recomputing the extrinsic parameter.
</summary>
            <remarks>
                <para>
The purpose of this overload is to support calibrating cameras whose 
mounting positions have been changed since previous calibration, 
using potentially sparse feature correspondences.
</para>
                <para>
This method handles 2 different usage cases depending on the value of 
SeparateCalPlate, if SeparateCalPlate is true, the algorithm assumes 
that there is a different calibration plate under each camera. The physical 
location of the feature in the input correspondences are in different
Plate2D spaces. If SeparateCalPlate is false, then it means all the 
camera are looking at the same calibration plate, the physical locations of 
all the features are defined in an unified Plate2D space.
</para>
                <para>
The current value of <see cref="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability" />
will affect the result returned by this method:
<list type="bullet"><item>
If the MotionCapability is RotationOnly, the operator cannot recover
the orientation of the plate placement pose, so it arbitrarily defines
the orientation of the Home2D coordinate space to be the same as the
Plate2D coordinate space orientation.
</item><item>
Similarly for TranslationOnly1Axis or TranslationOnly2Axes, the
operator cannot recover the center of rotation of the plate placement
pose, so it will arbitrarily define the origin of the Home2D
coordinate system to be the same as the Plate2D origin.
</item></list></para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration,  the cameras' extrinsic parameters
changes such as in-plane rotation and translation, are to be expected. 
Small changes to non-in-plane rotation and translation that cause changes in 
perspective are also allowed.
</item></list></para>
            </remarks>
            <param name="correspondedPointPairs">
The corresponded point pairs to be processed.
</param>
            <param name="pelRects">
The pelrects used to extract the corresponded point pairs. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage when the images that provided the corresponded
point pairs were acquired.
</param>
            <param name="raw2DFromCamera2Ds">
The previously computed calibration results which is expected to have 
better accuracy (e.g., using calibration plate). The intrinsic parameters of
input camera calibrations are kept during computing the hand-eye calibration,
while the extrinsic parameter are recalculated based on the provided corresponded point pairs.
</param>
            <returns>
A CogHandEyeCalibrationResults containing the results of the
analysis, i.e. a CogHandEyeCalibrationResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the correspondedPointPairs argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the raw2DFromCamera2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
The number of poses in correspondedPointPairs is different
from the number of items in uncorrectedHome2DFromStage2Ds.
</item><item>
The number of cameras in correspondedPointPairs is different
from the number of items in pelRects.
</item><item>
The number of cameras in correspondedPointPairs is inconsistent
in different poses.
</item><item>
The handedness flip between camera and plate is inconsistent
in different poses.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationOnly and any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different translation components.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
All elements of uncorrectedHome2DFromStage2Ds have exactly the
same translation component.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature point in the correspondedPointParams
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The Raw2DFromCamera2D transform for any of the items
in raw2DFromCamera2Ds is null.
</item><item>
The number of cameras represented by the raw2DFromCamera2Ds
argument does not match the number of items in the
pelRects argument.
</item><item>
If the supplied raw2DFromCamera2Ds is using a lens 
distortion model different from the one set in this calibrator.
</item></list></exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Execute(Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults)">
            <summary>
Recompute the CogHandEyeCalibrationResults for the supplied 
trackedRaw2DFeatures, pelrects, and UncorrectedHome2DFromStage2D poses, 
reusing intrinsics parameter from the input CogHandEyeCalibrationResults
and recompute the extrinsic parameter.
</summary>
            <remarks>
                <para>
The purpose of this overload is to support calibrating cameras whose 
mounting positions have been changed since previous calibration, 
using potentially sparse feature correspondences.
</para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, there could be some
changes to the cameras' extrinsic parameters in-plane rotation 
and translation, there might also be some changes in perspective.
</item></list></para>
            </remarks>
            <param name="trackedRaw2DFeatures">
Tracked Raw2D feature position points. Each feature includes x,y coordinate and a validation value.
For different poseID: i, trackedRaw2DFeatures[i][cameraID][featureID] should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="pelRects">
The pelrects of the cameras. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage when the images that provided the tracked Raw2D 
features were acquired.
</param>
            <param name="previousCameraCalibrations">
The previously computed calibration results which is expected to have 
better accuracy (e.g., using calibration plate). The intrinsic parameters of
input camera calibrations are kept during computing the hand-eye calibration,
while the extrinsic parameter are recalculated based on the tracked Raw2D features.
</param>
            <returns>
A CogHandEyeCalibrationResults containing the results of the
analysis, i.e. a CogHandEyeCalibrationResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the trackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the previousCameraCalibrations argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
trackedRaw2DFeatures.Count != uncorrectedHome2DFromStage2Ds.Count
</item><item>
trackedRaw2DFeatures[i].Count != pelRects.Count for any pose i
</item><item>
trackedRaw2DFeatures[i1][j].Count != trackedRaw2DFeatures[i2][j] for any j.
</item><item>
Home2DUnitLengthReference!= UseMotionStage
</item><item>
Inconsistent handedness flip identified in different poses 
for the same camera.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationOnly and any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different translation components.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
All elements of uncorrectedHome2DFromStage2Ds have exactly the
same translation component.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature point in the trackedRaw2DFeatures 
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The Raw2DFromCamera2D transform for any of the items
in previousCameraCalibrations is null.
</item><item>
The number of cameras represented by the previousCameraCalibrations
argument does not match the number of items in the
pelRects argument.
</item><item>
If the supplied previousCameraCalibrations is using a lens 
distortion model different from the one set in this calibrator.
</item></list></exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Execute(Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[])">
            <summary>
Compute the CogHandEyeCalibrationResults for the supplied  
trackedRaw2DFeatures, pelrects, and UncorrectedHome2DFromStage2D
poses, using the current parameter settings.
</summary>
            <remarks>
                <para>
This method handles the usage case where a run time part are used instead 
of a calibration plate. Which means the input parameter will not have  
point pairs that have both physical feature location and Raw2D point
locations. The usage case is illustrated as the graph below.
<code>

                     ___                                ___
                    |   | Camera 1                     |   | Camera 2
                    |___|                              |___|
                     /_\                                /_





           ___                                ___
          |   | Camera 3                     |   | Camera 4
          |___|                              |___|
           /_\                                /_

                   ____________________________________________________
                  /                                                   /|
                 /   _________                     _______           / |                                             
                /   /         \   Motion Stage    /       \         /  |
               /   /     *     \                 /  *      |       /   |  
              /   /   *        /________________/       *  |      /    |         
             /   |\___                                ____/|     /        
            /     \__/                               /____/     /     
           /        /        Runtime part           //         /
          /        /     (Calibration Object)      //         / 
         /        /                               //         /        
        /   _____/                               //___      /
       /   /             _____________        *       \    /  
      /   /     *       /_____________\               /|  /
     /   /   *      *  //             \\    *     *  //  /
    /   |\____________//               \\___________//  /
   /     \____________/                 \___________/  / 
  /                                                   /  
 /___________________________________________________/
 |                                                   |
 |                                                   |
Tracked Raw2D feature based hand-eye calibration
</code></para>
            </remarks>
            <param name="trackedRaw2DFeatures">
Tracked Raw2D feature position points. Each feature includes x,y coordinate and a validation value.
For different poseID: i, trackedRaw2DFeatures[i][cameraID][featureID] should always correspond to the 
same physical feature. The validation value indicates whether this feature is visible in current 
camera under current pose.
</param>
            <param name="pelRects">
The pelrects of the cameras. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage when the images that provided the tracked Raw2D 
features were acquired.
</param>
            <returns>
A CogHandEyeCalibrationResults containing the results of the
analysis, i.e. a CogHandEyeCalibrationResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the trackedRaw2DFeatures argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
trackedRaw2DFeatures.Count != uncorrectedHome2DFromStage2Ds.Count
</item><item>
trackedRaw2DFeatures[i].Count != pelRects.Count for any pose i
</item><item>
trackedRaw2DFeatures[i1][j].Count != trackedRaw2DFeatures[i2][j] for any j.
</item><item>
Home2DUnitLengthReference != UseMotionStage
</item><item>
Inconsistent handedness flip identified in different poses 
for the same camera.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationOnly and any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different translation components.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
All elements of uncorrectedHome2DFromStage2Ds have exactly the
same translation component.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature point in the trackedRaw2DFeatures 
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Execute(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[],Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults)">
            <summary>
Recompute the CogHandEyeCalibrationResults for the supplied
corresponded point pairs, pelrects, and
UncorrectedHome2DFromStage2D poses,
reusing each camera's Raw2DFromCamera2D from
the input CogHandEyeCalibrationResults.
</summary>
            <remarks>
                <para>
The purpose of this overload is to support calibrating cameras whose 
mounting positions have been changed since previous calibration, 
using potentially sparse feature correspondences.
</para>
                <para>
This method handles 2 different usage cases depending on the value of 
SeparateCalPlate, if SeparateCalPlate is true, the algorithm assumes 
that there is a different calibration plate under each camera. The physical 
location of the feature in the input correspondences are in different
Plate2D spaces. If SeparateCalPlate is false, then it means all the 
camera are looking at the same calibration plate, the physical locations of 
all the features are defined in an unified Plate2D space.
The current value of <see cref="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability" />
will affect the result returned by this method:
<list type="bullet"><item>
If the MotionCapability is RotationOnly, the operator cannot recover
the orientation of the plate placement pose, so it arbitrarily defines
the orientation of the Home2D coordinate space to be the same as the
Plate2D coordinate space orientation.
</item><item>
Similarly for TranslationOnly1Axis or TranslationOnly2Axes, the
operator cannot recover the center of rotation of the plate placement
pose, so it will arbitrarily define the origin of the Home2D
coordinate system to be the same as the Plate2D origin.
</item></list></para>
                <para>
Requires:
<list type="bullet"><item>
Between the previous and current calibration, there should be no
change to the cameras' intrinsic parameters, e.g. focal length,
focus, aperture, lens unit, camera body.
</item><item>
Between the previous and current calibration, the cameras' extrinsic parameters
changes such as in-plane rotation and translation, are to be expected. 
Small changes to non-in-plane rotation and translation that cause changes in 
perspective are also allowed.
</item></list></para>
            </remarks>
            <param name="correspondedPointPairs">
The corresponded point pairs to be processed. The
correspondedPointPairs may be as sparse as a single feature point
correspondence per camera per view. 
</param>
            <param name="pelRects">
The pelrects used to extract the corresponded point pairs. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage when the images that provided the corresponded
point pairs were acquired.
</param>
            <param name="previousCameraCalibrations">
The previously computed calibration results which is expected to have 
better accuracy. If SeparateCalPlate is false, these input camera
calibrations are used without modification in computing the
complete hand-eye calibration, and are directly deep-copied
into the result set as the raw2DFromCamera2D for the corresponding
cameras. In other words, the input correspondences will NOT affect
the final result's raw2DFromCamera2D. If SeparateCalPlate is true, only  
the intrinsic parameters of input camera calibrations are kept during 
computing the hand-eye calibration, while the extrinsic parameter are 
recalculated based on the corresponded point pairs.
</param>
            <returns>
A CogHandEyeCalibrationResults containing the results of the
analysis, i.e. a CogHandEyeCalibrationResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the correspondedPointPairs argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the previousCameraCalibrations argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
Any of the input arguments is empty.
</item><item>
The number of poses in correspondedPointPairs is different
from the number of items in uncorrectedHome2DFromStage2Ds.
</item><item>
The number of cameras in correspondedPointPairs is different
from the number of items in pelRects.
</item><item>
The number of cameras in correspondedPointPairs is inconsistent
in different poses.
</item><item>
The handedness flip between camera and plate is inconsistent
in different poses.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationOnly and any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different translation components.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
All elements of uncorrectedHome2DFromStage2Ds have exactly the
same translation component.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature point in the correspondedPointParams
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The Raw2DFromCamera2D transform for any of the items
in previousCameraCalibrations is null.
</item><item>
The number of cameras represented by the previousCameraCalibrations
argument does not match the number of items in the
pelRects argument.
</item><item>
If the supplied previousCameraCalibrations is using a lens 
distortion model different from the one set in the calibrator.
</item></list></exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Execute(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,System.Drawing.Rectangle[],Cognex.VisionPro.CogTransform2DRigid[])">
            <summary>
Compute the CogHandEyeCalibrationResults for the supplied corresponded
point pairs, pelrects, and UncorrectedHome2DFromStage2D poses,
using the current parameter settings.
</summary>
            <remarks>
                <para>
This method handles 2 different usage cases depending on the value of 
SeparateCalPlate, if SeparateCalPlate is true, the algorithm assumes 
that there is a different calibration plate under each camera. The 
physical location of the features in the input correspondences from each 
camera are in different Plate2D spaces. If SeparateCalPlate is false, 
then it means all the camera are looking at the same calibration plate, 
the physical locations of all the features are defined in an unified
Plate2D space. The graph below shows the difference between the two 
different calibration methods.
</para>
                <code>
                     ___                                ___
                    |   | Camera 1                     |   | Camera 2
                    |___|                              |___|
                     /_\                                /_







           ___                                ___
          |   | Camera 3                     |   | Camera 4
          |___|                              |___|
           /_\                                /_

                   ____________________________________________________
                  /               Motion Stage                        /|
                 /    _______________________________________        / | 
                /    /                                      /|      /  |
               /    /   *    *    *    *    *    *    *    / /     /   |
              /    /                                      / /     /    |
             /    /   *    *    *    *    *    *    *    / /     /
            /    /                                      / /     /
           /    /   *    *    *    *    *    *    *    / /     /
          /    /       Big calibration plate          / /     /
         /    /   *    *    *    *    *    *    *    / /     /
        /    /                                      / /     /
       /    /   *    *    *    *    *    *    *    / /     /
      /    /                                      / /     /
     /    /    *    *    *    *    *    *    *   / /     /
    /    /______________________________________/ /     /
   /     |______________________________________|/     /
  /                                                   /
 /___________________________________________________/     
 |                                                   | 
 |                                                   |
Regular big calibration plate based hand-eye calibration
-----------------------------------------------------------------------------


                     ___                                ___
                    |   | Camera 1                     |   | Camera 2
                    |___|                              |___|
                     /_\                                /_





           ___                                ___
          |   | Camera 3                     |   | Camera 4
          |___|                              |___|
           /_\                                /_

                   ____________________________________________________
                  /                                                   /|
                 /   __________                     __________       / |                                             
                /   /         /|                   /         /|     /  |
               /   /  *   *  / /                  /  *   *  / /    /   |    
              /   /  *   *  / /                  /  *   *  / /    /    |           
             /   /_________/ /                  /_________/ /    /       
            /    |_________|/                   |_________|/    /
           /     calibration plate 1     calibration plate 2   /
          /                                                   /
         /                   Motion Stage                    /      
        /   __________                     __________       /
       /   /         /|                   /         /|     /
      /   /  *   *  / /                  /  *   *  / /    /  
     /   /  *   *  / /                  /  *   *  / /    /
    /   /_________/ /                  /_________/ /    /  
   /    |_________|/                   |_________|/    /    
  /     calibration plate 3     calibration plate 4   /
 /___________________________________________________/
 |                                                   |
 |                                                   |
Separate calibration plate based hand-eye calibration
</code>
                <para>
The current value of <see cref="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability" />
will affect the result returned by this method:
<list type="bullet"><item>
If the MotionCapability is RotationOnly, the operator cannot recover
the orientation of the plate placement pose, so it arbitrarily defines
the orientation of the Home2D coordinate space to be the same as the
Plate2D coordinate space orientation.
</item><item>
Similarly for TranslationOnly1Axis or TranslationOnly2Axes, the
operator cannot recover the center of rotation of the plate placement
pose, so it will arbitrarily define the origin of the Home2D
coordinate system to be the same as the Plate2D origin.
</item></list></para>
            </remarks>
            <param name="correspondedPointPairs">
The corresponded point pairs to be processed.
</param>
            <param name="pelRects">
The pelrects used to extract the corresponded point pairs. There
should be one pelrect for each camera. The input pelRects
specifies the pelrect of each camera. There is no relationship
between the pelrects of two separate cameras. It is used to define
the origin of camera coordinate system (i.e. Camera2D) which is at 
the center of the pelrect.
</param>
            <param name="uncorrectedHome2DFromStage2Ds">
The sequence of UncorrectedHome2DFromStage2D poses that were used
to move the stage when the images that provided the corresponded
point pairs were acquired.
</param>
            <returns>
A CogHandEyeCalibrationResults containing the results of the
analysis, i.e. a CogHandEyeCalibrationResult object for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the correspondedPointPairs argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the pelRects argument is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2Ds argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
If TimeoutEnabled is true and this method does not complete
within Timeout milliseconds.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following is true:
<list type="bullet"><item>
The number of poses in correspondedPointPairs is different
from the number of items in uncorrectedHome2DFromStage2Ds.
</item><item>
The number of cameras in correspondedPointPairs is different
from the number of items in pelRects.
</item><item>
The number of cameras in correspondedPointPairs is inconsistent
in different poses.
</item><item>
The handedness flip between camera and plate is inconsistent
in different poses.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 4 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationAndTranslation1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
All elements of the uncorrectedHome2DFromStage2Ds parameter
have exactly the same translation component.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is RotationOnly and any of the following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
The rotation span among all elements of uncorrectedHome2DFromStage2Ds
is less than MinimumRotationSpan.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different translation components.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly1Axis and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 2 elements.
</item><item>
All elements of uncorrectedHome2DFromStage2Ds have exactly the
same translation component.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If MotionCapability is TranslationOnly2Axes and any of the
following is true:
<list type="bullet"><item>
The uncorrectedHome2DFromStage2Ds parameter has fewer than 3 elements.
</item><item>
The translation component of all elements of
uncorrectedHome2DFromStage2Ds are roughly collinear.
Note: the elements of uncorrectedHome2DFromStage2Ds are
said to be roughly collinear if, when projecting these
translation components to any pair of perpendicular axes, the
shortest projection span is less than 10% of the longest
projection span.
</item><item>
There are two elements of uncorrectedHome2DFromStage2Ds with
different rotation angles.
</item></list></exception>
            <exception cref="T:System.ArgumentException">
If any Raw2D feature point in the correspondedPointParams
argument falls outside its corresponding pelrect.  
</exception>
            <exception cref="T:System.ArgumentException">
If the input data is degenerate.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Timeout">
            <summary>
The maximum time in milliseconds that the Execute method
will be allowed to run if TimeoutEnabled is true.
</summary>
            <value>
The default is the 120000.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The supplied value is less than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.TimeoutEnabled">
            <summary>
Enable or disable timeout for the Execute methods.
</summary>
            <value>
The default is False.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.EstimateMotionYAxis">
            <summary>
For Cognex internal use only.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.TrackedRaw2DFeaturesAreSparse">
            <summary>
For Cognex internal use only.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MinimumRotationSpan">
            <summary>
The minimum required rotation angle span in radians among
all input uncorrectedHome2DFromStage2D poses for motion capabilities
that allows rotation. The run-time function will throw an
exception if the rotation angle span among all input
uncorrectedHome2DFromStage2D poses is less than this
minimum requirement.
</summary>
            <value>
The default is the radian equivalent of 5 degrees.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The supplied value is less than or equal to zero, or
is greater than or equal to 2PI (360 degrees).
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SeparateCalPlate">
            <summary>
Indicates if running separate calibration plate hand-eye calibration or regular big calibration plate calibration.
This is only applicable when using corresponded point pairs as input for Execute overloads.
</summary>
            <value>
The default is False (regular hand-eye calibration).
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MovingCamera">
            <summary>
Indicates if the cameras are moving or stationary.
</summary>
            <value>
The default is False.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Home2DUnitLengthReference">
            <summary>
Specifies how unit length in Home2D is established.
</summary>
            <value>
The default is UseCalibrationPlate.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of the
CogHandEyeHome2DUnitLengthReferenceConstants enumeration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.MotionCapability">
            <summary>
The motion capability of the stage.
</summary>
            <value>
The default is RotationAndTranslation2Axes.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of the
CogHandEyeMotionCapabilityConstants enumeration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.DistortionModel">
            <summary>
The optical distortion model to be used in computing
Raw2DFromCamera2D.
</summary>
            <value>
The default is <see cref="T:Cognex.VisionPro.CogLensDistortionModelConstants">ThreeParamRadial</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of the
CogLensDistortionModelConstants enumeration.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrator object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Finalize">
            <summary>
Finalize this CogHandEyeCalibrator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.Dispose">
            <summary>
Destruct this CogHandEyeCalibrator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.#ctor(Cognex.VisionPro.CalibFix.CogHandEyeCalibrator)">
            <summary>
Copy constructs a CogHandEyeCalibrator object.
</summary>
            <param name="Other">
The calibrator object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.#ctor">
            <summary>
This constructor creates a default CogHandEyeCalibrator object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfEstimateMotionYAxis">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by EstimateMotionYAxis
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfTrackedRaw2DFeaturesAreSparse">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TrackedRaw2DFeaturesAreSparse
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfSeparateCalPlate">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SeparateCalPlate
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Timeout
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TimeoutEnabled
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfMinimumRotationSpan">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by MinimumRotationSpan
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfMovingCamera">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by MovingCamera
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfHome2DUnitLengthReference">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Home2DUnitLengthReference
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfMotionCapability">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by MotionCapability
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator.SfDistortionModel">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by DistortionModel
may have been changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibrator">
            <summary>
The CogHandEyeCalibrator class performs a hand-eye calibration between
one or more cameras and a motion stage.
</summary>
            <remarks>
                <para>
The CogHandEyeCalibrator computes the mathematical
transform to map image coordinate positions to and from their
corresponding coordinates in the coordinate system defined by the
motion axes of the stage. This is a 2-D transform. This operator
provides no 3-D information.
</para>
                <para>
This operator can handle stationary and moving camera
configurations. In the stationary-camera configuration, the physical
position of the cameras remains unchanged when the motion stage
moves. Typically, when calibrating cameras on such a system, a
calibration plate is affixed to the motion stage and is moved by the
motion stage during calibration. In the moving-camera configuration,
the cameras may be mounted on the motion stage so that their physical
positions change relative to the stage's home position. Typically,
when calibrating cameras on such a system, a calibration plate is
affixed to the machine's base and remains stationary during
calibration, while the motion stage moves the cameras around. In both
configurations, the relative position among all cameras always remains
unchanged.
</para>
                <para>
This operator also models systematic errors in the motion stage and
determines the relationship between the parameters used to control the
motion stage, i.e. (X,Y,Theta) and the actual physical pose of the
stage in the home coordinate system.
</para>
                <para>
                    <b>Coordinate Systems</b>
                    <list type="number">
                        <item>
                            <b>Home coordinate system (Home2D)</b>
                            <br />
Home2D is the base reference space in which all other coordinate spaces
and their relationships are described. Home2D is defined by the X axis
of the motion stage and the motion stage's center of rotation. The
origin is at the stage's center of rotation when the stage is
at the home position. The X-axis of Home2D is perfectly aligned with
the motion-stage's X-axis. The Y-axis of Home2D is exactly 90 degrees
from the X-axis and in the general direction of the motion stage's
Y-axis.
</item>
                        <item>
                            <b>Image coordinate system (Raw2D)</b>
                            <br />
Raw2D is the pixel space coordinate system of a single camera. There is
one instance of such a coordinate system for each camera. Each camera's
Raw2D coordinate system is independent of every other camera.
</item>
                        <item>
                            <b>Camera coordinate system (Camera2D)</b>
                            <br />
Camera2D is the physical orthonormal coordinate system for a single camera.
There is one instance of such a coordinate system for each camera. The
origin of Camera2D is at a position in Home2D that corresponds to the
center of the camera's pelrect. Its X axis is parallel to the
Raw2D X-axis at the Camera2D origin. The Y axis is exactly 90 degrees
from the X-axis and in the general direction of the Raw2D Y axis.
</item>
                        <item>
                            <b>Calibration target coordinate system (Plate2D)</b>
                            <br />
Plate2D is the (global) coordinate system of the calibration plate.
At any instance of time, all calibration features viewed by all
cameras are described in the same Plate2D coordinate system. However,
this space may be moved around in the Home2D coordinates by the motion
stage. Plate2D is an orthonormal coordinate system, although its length
unit may have a non-identity scale factor from Home2D. Plate2D and
Home2D may have different handedness.
</item>
                        <item>
                            <b>Stage coordinate system (Stage2D)</b>
                            <br />
Stage2D is an orthonormal coordinate system that is attached to the
motion stage's center of rotation, and moves along with the motion
stage.
</item>
                    </list>
                </para>
                <para>
                    <b>Handedness</b>
The operator assumes independent handedness among Home2D, Camera2D,
and Plate2D.
</para>
                <para>
                    <b>Stage Pose and Systematic Errors in the Motion Stage</b>
                    <list type="number">
                        <item>
                            <b>Home2DFromStage2D (Actual physical pose of the motion stage)</b>
                            <br />
Home2DFromStage2D is the actual physical pose of the motion stage in
Home2D. It defines the relationship between Home2D and Stage2D and can
be represented by a 2D rigid transform.
</item>
                        <item>
                            <b>UncorrectedHome2DFromStage2D (Commanded pose of the motion stage)</b>
                            <br />
Due to systematic errors in the motion stage, the commanded pose of
the motion stage may not match the actual physical pose of the motion
stage in Home2D (i.e., Home2DFromStage2D). The term
UncorrectedHome2DFromStage2D is used to describe the commanded pose of
the motion stage because it represents the user's best guess of the
pose of the motion stage prior to calibration.
</item>
                    </list>
                </para>
                <para>
Use cases of hand-eye calibration
</para>
                <para>
We have three different usage cases for hand-eye calibration, which are:
<list type="bullet"><item> Regular (using a big calibration plate) hand-eye calibration. </item><item> Separate calibration plates based hand-eye calibration. </item><item> TrackedRaw2DFeatures (from a part) based hand-eye calibration. </item></list></para>
The differences of the three hand-eye calibration types are shown in the graph below:
<code>
-----------------------------------------------------------------------------
Regular big calibration plate based hand-eye calibration
                     ___                                ___
                    |   | Camera 1                     |   | Camera 2
                    |___|                              |___|
                     /_\                                /_







           ___                                ___
          |   | Camera 3                     |   | Camera 4
          |___|                              |___|
           /_\                                /_

                   ____________________________________________________
                  /               Motion Stage                        /|
                 /    _______________________________________        / | 
                /    /                                      /|      /  |
               /    /   *    *    *    *    *    *    *    / /     /   |
              /    /                                      / /     /    |
             /    /   *    *    *    *    *    *    *    / /     /
            /    /                                      / /     /
           /    /   *    *    *    *    *    *    *    / /     /
          /    /             Big calibration plate    / /     /
         /    /   *    *    *    *    *    *    *    / /     /
        /    /                                      / /     /
       /    /   *    *    *    *    *    *    *    / /     /
      /    /                                      / /     /
     /    /    *    *    *    *    *    *    *   / /     /
    /    /______________________________________/ /     /
   /     |______________________________________|/     /
  /                                                   /
 /___________________________________________________/     
 |                                                   | 
 |                                                   |
-----------------------------------------------------------------------------
Separate calibration plates based hand-eye calibration

                     ___                                ___
                    |   | Camera 1                     |   | Camera 2
                    |___|                              |___|
                     /_\                                /_





           ___                                ___
          |   | Camera 3                     |   | Camera 4
          |___|                              |___|
           /_\                                /_

                   ____________________________________________________
                  /                                                   /|
                 /   __________                     __________       / |                                             
                /   /         /|                   /         /|     /  |
               /   /  *   *  / /                  /  *   *  / /    /   |    
              /   /  *   *  / /                  /  *   *  / /    /    |           
             /   /_________/ /                  /_________/ /    /       
            /    |_________|/                   |_________|/    /
           /     calibration plate 1     calibration plate 2   /
          /                                                   /
         /                   Motion Stage                    /      
        /   __________                     __________       /
       /   /         /|                   /         /|     /
      /   /  *   *  / /                  /  *   *  / /    /  
     /   /  *   *  / /                  /  *   *  / /    /
    /   /_________/ /                  /_________/ /    /  
   /    |_________|/                   |_________|/    /    
  /     calibration plate 3     calibration plate 4   /
 /___________________________________________________/
 |                                                   |
 |                                                   |
-----------------------------------------------------------------------------
Tracked Raw2D features (from a part) based hand-eye calibration

                     ___                                ___
                    |   | Camera 1                     |   | Camera 2
                    |___|                              |___|
                     /_\                                /_





           ___                                ___
          |   | Camera 3                     |   | Camera 4
          |___|                              |___|
           /_\                                /_

                   ____________________________________________________
                  /                                                   /|
                 /   _________                     _______           / |                                             
                /   /         \   Motion Stage    /       \         /  |
               /   /     *     \                 /  *      |       /   |  
              /   /   *        /________________/       *  |      /    |         
             /   |\___                                ____/|     /        
            /     \__/                               /____/     /     
           /        /        Runtime part           //         /
          /        /     (Calibration Object)      //         / 
         /        /                               //         /        
        /   _____/                               //___      /
       /   /             _____________        *       \    /  
      /   /     *       /_____________\               /|  /
     /   /   *      *  //             \\    *     *  //  /
    /   |\____________//               \\___________//  /
   /     \____________/                 \___________/  / 
  /                                                   /  
 /___________________________________________________/
 |                                                   |
 |                                                   |
-----------------------------------------------------------------------------
</code><para>
For regular calibration plate hand-eye calibration and separate
calibration plate hand-eye calibration,  depending on the value of property SeparateCalPlate,
different calibration method will be called.
</para></remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrationResults object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults.#ctor(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults)">
            <summary>
Copy constructs a CogHandEyeCalibrationResults object. This is
a deep copy.
</summary>
            <param name="Other">
The calibration results object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResults">
            <summary>
The CogHandEyeCalibrationResults class holds zero or more instances
of CogHandEyeCalibrationResult, presumably one for each camera being
calibrated. This class is immutable - its content is set at
construction by the CogHandEyeCalibrator and cannot be changed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrationRemoteCameraResults object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResults.Finalize">
            <summary>
Finalize this CogHandEyeCalibrationRemoteCameraResults.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResults.Dispose">
            <summary>
Destruct this CogHandEyeCalibrationRemoteCameraResults.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResults.#ctor(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResults)">
            <summary>
Copy constructs a CogHandEyeCalibrationRemoteCameraResults object. This is
a deep copy.
</summary>
            <param name="Other">
The calibration results object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResults">
            <summary>
The CogHandEyeCalibrationRemoteCameraResults class holds zero or more instances
of CogHandEyeCalibrationRemoteCameraResult, presumably one for each remote camera
being calibrated.  Its content is set at
construction by the CogHandEyeCalibratorRemoteCameras and should not be changed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.CreateLensDistortionVectorGraphics(System.Double)">
            <summary>
Returns the graphics representing the lens distortion for this camera.
The start point of each line segment is the point when lens distortion
is begin modeled, while the end point is the point for NoDistortion.
The specified scaleFactor is applied to the length of the line
segment such that the end point moves.
</summary>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.CreateLensDistortionVectorGraphics(System.Double,Cognex.VisionPro.CogLineSegment)">
            <summary>
Returns the graphics representing the lens distortion for this camera.
The start point of each line segment is the point when lens distortion
is begin modeled, while the end point is the point for NoDistortion.
The specified scaleFactor is applied to the length of the line
segment such that the end point moves. The graphics characteristics
of the supplied line segment are duplicated in all of the
computed line segments.
</summary>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <param name="exampleLineSeg">
Specify the desired graphics characteristics by providing this example.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
            <exception cref="T:System.ArgumentNullException">
If exampleLineSeg argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.CreateResidualVectorGraphics(System.Double)">
            <summary>
Returns the graphics representing the residuals for the used features.
The start point of each graphic line segment is the mapped
feature point, while the associated end point is the found
feature location. The specified scaleFactor is applied to the length
of the line segment such that the end point moves.
</summary>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.CreateResidualVectorGraphics(System.Double,Cognex.VisionPro.CogLineSegment)">
            <summary>
Returns the graphics representing the residuals for the used
features. The start point of each graphic line segment is the mapped
feature point, while the associated end point is the found
feature location. The specified scaleFactor is applied to the length
of the line segment such that the end point moves. The graphics
characteristics of the supplied line segment are duplicated in
all of the computed line segments.
</summary>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <param name="exampleLineSeg">
Specify the desired graphics characteristics by providing this example.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
            <exception cref="T:System.ArgumentNullException">
If exampleLineSeg argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetResidualsHome2DRMS">
            <summary>
Returns the RMS residual values in Home2D, in computing the
calibration for this camera.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetResidualsHome2DMax">
            <summary>
Returns the maximum residual values in Home2D, in computing
the calibration for this camera.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetResidualsRaw2DRMS">
            <summary>
Returns the RMS residual values in Raw2D, in computing the
calibration for this camera.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetResidualsRaw2DMax">
            <summary>
Returns the maximum residual values in Raw2D, in computing
the calibration for this camera.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetHome2DFromStationaryCamera2D">
            <summary>
Return a copy of the Home2DFromStationaryCamera2D transform.
This is a rigid transform that may also have handedness flip.
This is the placement pose of the camera.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetHome2DFromCamera2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Implement the abstract method in ICogHandEyeCalibrationResult.
Return a copy of the Home2DFromCamera2D transform. 
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The input stage pose is ignored as remote camera is stationary.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetRaw2DFromHome2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Implement the abstract method in ICogHandEyeCalibrationResult.
Return a copy of the Raw2DFromHome2D transform. 
uncorrectedHome2DFromStage2D is ignored as remote camera is stationary.
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The input stage pose is ignored as remote camera is stationary.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetRaw2DFromHome2D">
            <summary>
Return a copy of the Raw2DFromHome2D transform. 
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetRaw2DFromCamera2D">
            <summary>
Implement the abstract method in ICogHandEyeCalibrationResult.
Returns the transform that maps coordinates from the camera coordinate
system (Camera2D) to the image coordinate system (Raw2D).
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for CogHandEyeCalibrationRemoteCameraResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrationRemoteCameraResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.Finalize">
            <summary>
Finalize this CogHandEyeCalibrationRemoteCameraResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.Dispose">
            <summary>
Destruct this CogHandEyeCalibrationRemoteCameraResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult.#ctor(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult)">
            <summary>
Copy constructs a CogHandEyeCalibrationRemoteCameraResult object. This
is a deep copy.
</summary>
            <param name="Other">
The calibration result object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationRemoteCameraResult">
            <summary>
The CogHandEyeCalibrationRemoteCameraResult class holds the hand-eye 
calibration result for a remote camera which is not involved in the initial
hand-eye calibration. The calibration for the remote camera is usually 
achieved by having the remote camera and the primary (already calibrated) 
cameras view a single calibration target. In case where the primary cameras
and the remote camera doesn't have common FOV, a full hand-eye calibration 
is performed and the result are converted into remote calibration result.
<para>
The calibration target may be viewed simultaneously by all cameras 
or may be moved independently into the field of view of each camera,
via a known motion or an unknown but highly repeatable motion which 
is used in both calibration time and run time.
</para><para>
It is an immutable object - its content is set at construction and cannot
be changed.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.#ctor(ccMultiViewPlanarCalibResult*,Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,Cognex.VisionPro.CogTransform2DRigid[],System.Int32)">
            <summary>
Return mCorrespondences.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetHome2DFromCamera2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Implement the abstract method in ICogHandEyeCalibrationResult.
Returns a copy of the Home2DFromCamera2D transform. 
If it is stationary camera, the input parameter is ignored.
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The uncorrected Home2DFromStage2D transform. If the calibration result is not for a moving
camera then this argument is ignored.
</param>
            <exception cref="T:System.ArgumentNullException">
If the calibration result is for a moving camera but the 
uncorrectedHome2DFromStage2D argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.CreateLensDistortionVectorGraphics(System.Int32,System.Double)">
            <summary>
Returns the graphics representing the lens distortion for this camera.
The start point of each line segment is the point when lens distortion
is begin modeled, while the end point is the point for NoDistortion.
The specified scaleFactor is applied to the length of the line
segment such that the end point moves
</summary>
            <param name="stagePoseIndex">
The stage pose index.
</param>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If stagePoseIndex is less than zero or if stagePoseIndex
is not less than the number of poses used to produce this result.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.CreateLensDistortionVectorGraphics(System.Int32,System.Double,Cognex.VisionPro.CogLineSegment)">
            <summary>
Returns the graphics representing the lens distortion for this camera.
The start point of each line segment is the point when lens distortion
is begin modeled, while the end point is the point for NoDistortion.
The specified scaleFactor is applied to the length of the line
segment such that the end point moves. The graphics characteristics
of the supplied line segment are duplicated in all of the
computed line segments.
</summary>
            <param name="stagePoseIndex">
The stage pose index.
</param>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <param name="exampleLineSeg">
Specify the desired graphics characteristics by providing this example.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If stagePoseIndex is less than zero or if stagePoseIndex
is not less than the number of poses used to produce this result.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
            <exception cref="T:System.ArgumentNullException">
If exampleLineSeg argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.CreateResidualVectorGraphics(System.Int32,System.Double)">
            <summary>
Returns the graphics representing the residuals for the specified
stage pose. The start point of each graphic line segment is the mapped
physical space point, while the associated end point is the found
feature location. The specified scaleFactor is applied to the length
of the line segment such that the end point moves.
</summary>
            <param name="stagePoseIndex">
The stage pose index.
</param>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If stagePoseIndex is less than zero or if stagePoseIndex
is not less than the number of poses used to produce this result.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.CreateResidualVectorGraphics(System.Int32,System.Double,Cognex.VisionPro.CogLineSegment)">
            <summary>
Returns the graphics representing the residuals for the specified
stage pose. The start point of each graphic line segment is the mapped
physical space point, while the associated end point is the found
feature location. The specified scaleFactor is applied to the length
of the line segment such that the end point moves. The graphics
characteristics of the supplied line segment are duplicated in
all of the computed line segments.
</summary>
            <param name="stagePoseIndex">
The stage pose index.
</param>
            <param name="scaleFactor">
The graphic scale factor.
</param>
            <param name="exampleLineSeg">
Specify the desired graphics characteristics by providing this example.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If stagePoseIndex is less than zero or if stagePoseIndex
is not less than the number of poses used to produce this result.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If scaleFactor is not greater than zero.
</exception>
            <exception cref="T:System.ArgumentNullException">
If exampleLineSeg argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetEstimatedHome2DFromStage2DPoses">
            <summary>
Return an array of estimated Home2DFromStage2D poses.  Note: the
values of these estimated Home2DFromStage2D poses are not affected by
the CogHandEyeCalibrator's MotionCapability property.  For example,
even if Motion Capability is set to RotationOnly and all input
UncorrectedHom2DFromStage2D share exactly the same translation
component, the estimated Home2DFromStage2D poses may still have
different translation components if the correspondence data so
suggest. Also note that the number of elements in the returned
array, that number of estimated poses, corresponds to the number
of poses represented in the original correspondence data.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetOverallResidualsHome2D(System.Double@,System.Double@)">
            <summary>
Get the overall residuals in Home2D, in computing the hand-eye
calibration for this camera using all UncorrectedHome2DFromStage2D
poses.
</summary>
            <param name="max">
The maximum Home2D residual.
</param>
            <param name="rms">
The RMS Home2D residual.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetOverallResidualsRaw2D(System.Double@,System.Double@)">
            <summary>
Get the overall residuals in Raw2D, in computing the hand-eye
calibration for this camera using all UncorrectedHome2DFromStage2D
poses.
</summary>
            <param name="max">
The maximum Raw2D residual.
</param>
            <param name="rms">
The RMS Raw2D residual.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetSingleViewResidualsPlate2DRMS">
            <summary>
Returns an array of the RMS residual values in Plate2D, in computing the
single-view calibration for this camera for each
UncorrectedHome2DFromStage2D pose.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetSingleViewResidualsPlate2DMax">
            <summary>
Returns an array of the maximum residual values in Plate2D, in computing
the single-view calibration for this camera for each
UncorrectedHome2DFromStage2D pose.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetSingleViewResidualsRaw2DRMS">
            <summary>
Returns an array of the RMS residual values in Raw2D, in computing the
single-view calibration for this camera for each
UncorrectedHome2DFromStage2D pose.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetSingleViewResidualsRaw2DMax">
            <summary>
Returns an array of the maximum residual values in Raw2D, in computing
the single-view calibration for this camera for each
UncorrectedHome2DFromStage2D pose.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.ConvertHome2DFromStage2DToUncorrectedHome2DFromStage2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Return the UncorrectedHome2DFromStage2D pose corresponding to the
input Home2DFromStage2D.
</summary>
            <param name="home2DFromStage2D">
The Home2DFromStage2D transform.
</param>
            <exception cref="T:System.ArgumentNullException">
If the home2DFromStage2D argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.ConvertUncorrectedHome2DFromStage2DToHome2DFromStage2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Return the Home2DFromStage2D transform corresponding to the input
UncorrectedHome2DFromStage2D pose.
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The uncorrected Home2DFromStage2D transform.
</param>
            <exception cref="T:System.ArgumentNullException">
If the uncorrectedHome2DFromStage2D argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetMotionYAxisHome2D(System.Double@,System.Double@)">
            <summary>
Get the X and Y coordinates of the vector that describes the Y-axis of
motion in Home2D. This specifies both the direction and magnitude
of Y unit travel. The direction should be close to +90 degrees.
</summary>
            <param name="yAxisHome2DX">
The X coordinate of the vector that describes the motion Y-axis in
Home2D.
</param>
            <param name="yAxisHome2DY">
The Y coordinate of the vector that describes the motion Y-axis in
Home2D.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetMotionXAxisHome2D(System.Double@,System.Double@)">
            <summary>
Get the X and Y coordinates of the vector that describes the X-axis of
motion in Home2D.  This specifies the magnitude of X unit travel. The
direction of X unit travel is accurate by definition.
</summary>
            <param name="xAxisHome2DX">
The X coordinate of the vector that describes the motion X-axis in
Home2D.
</param>
            <param name="xAxisHome2DY">
The Y coordinate of the vector that describes the motion X-axis in
Home2D.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetStage2DFromMovingPlate2D">
            <summary>
Return a copy of the Stage2DFromMovingPlate2D transform.
This is a rigid transform that may also flip handedness.
This is the placement pose of the plate.
This is only valid if MovingCamera is false.
</summary>
            <exception cref="T:System.InvalidOperationException">
If MovingCamera is true.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetHome2DFromStationaryPlate2D">
            <summary>
Return a copy of the Home2DFromStationaryPlate2D transform.
This is a rigid transform that may also flip handedness.
This is the placement pose of the plate.
This is only valid if MovingCamera is true.
</summary>
            <exception cref="T:System.InvalidOperationException">
If MovingCamera is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetStage2DFromMovingCamera2D">
            <summary>
Return a copy of the Stage2DFromMovingCamera2D transform.
This is a rigid transform that may also flip handedness.
This is the placement pose of the camera.
This is only valid if MovingCamera is true.
</summary>
            <exception cref="T:System.InvalidOperationException">
If MovingCamera is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetHome2DFromStationaryCamera2D">
            <summary>
Return a copy of the Home2DFromStationaryCamera2D transform.
This is a rigid transform that may also flip handedness.
This is the placement pose of the camera.
This is only valid if MovingCamera is false.
</summary>
            <exception cref="T:System.InvalidOperationException">
If MovingCamera is true.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetRaw2DFromHome2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Implement the abstract method in ICogHandEyeCalibrationResult.
Return a copy of the Raw2DFromHome2D transform for the specified
UncorrectedHome2DFromStage2D. When MovingCamera is false, the
uncorrectedHome2DFromStage2D argument is ignored.
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The UncorrectedHome2DFromStage2D. If MovingCamera is false then
this argument is ignored.
</param>
            <exception cref="T:System.ArgumentNullException">
If MovingCamera is true and the uncorrectedHome2DFromStage2D
argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetRaw2DFromCamera2D">
            <summary>
Implement the abstract method in ICogHandEyeCalibrationResult.
Returns the transform that maps coordinates in the camera coordinate
system (Camera2D) to the image coordinate system (Raw2D).
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.Correspondences">
            <summary>
Return the corresponded point pairs, indexed first by pose, then by camera.
</summary>
            <remarks>
                <para>
If a single calibration plate was used in hand-eye calibration, then the returned
corresponded point pairs are the same as the input values. 
</para>
                <para>
Otherwise (such as separate calibration plates were used, or tracked Raw2D features on the part 
were used), the image 
positions in the returned corresponded point pairs are the same as input values,
but the physical positions are the estimated values during hand-eye calibration.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.MovingCamera">
            <summary>
If true, this calibration result corresponds to a moving
camera configuration. If false, this calibration result
corresponds to a stationary camera configuration.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for CogHandEyeCalibrationResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrationResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.Finalize">
            <summary>
Finalize this CogHandEyeCalibrationResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.Dispose">
            <summary>
Destruct this CogHandEyeCalibrationResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult.#ctor(Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult)">
            <summary>
Copy constructs a CogHandEyeCalibrationResult object. This is a deep
copy.
</summary>
            <param name="Other">
The calibration result object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeCalibrationResult">
            <summary>
The CogHandEyeCalibrationResult class describes the hand-eye calibration
for a single camera. It is an immutable object - its content is set at
construction and cannot be changed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for CogCalibFeatureExtractorCheckerboard object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibFeatureExtractorCheckerboard object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Extracts features from a checkerboard calibration plate image (the checkerboard calibration plate must follow the Cognex specifications). 
Note that in the resulting feature correspondences, the image positions 
(<see cref="P:Cognex.VisionPro.CogFeatureCrsp.ImageX" /> and <see cref="P:Cognex.VisionPro.CogFeatureCrsp.ImageY" />
are in the root space ("@") of the input image,
and the physical positions
(<see cref="P:Cognex.VisionPro.CogFeatureCrsp.PhysicalX" /> and <see cref="P:Cognex.VisionPro.CogFeatureCrsp.PhysicalY" />
are in Plate2D space (see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />).
</summary>
            <param name="image">
The calibration image of the checkerboard calibration plate. Note that the checkerboard calibration plate must follow the Cognex specifications.
</param>
            <returns>
The result holding the extracted feature correspondences and symbol parsing information if computed.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="image" /> is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">
If <paramref name="image" /> is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If <paramref name="image" /> is not a CogImage8Grey.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
If the transform from "#" to "." 
in <paramref name="image" /> is not a linear transform.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixDotCorrespondenceFailedException">
If consistent labeling of the vertices could not be carried out. It 
may occur due to out-of-focus images or images with severe light 
gradient or very small checker size in images, etc. 
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixNoFiducialException">
If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />  is 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseFiducial</see> and the expected
fiducial feature is not found. 
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixDataMatrixNotFoundException">
If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />  is 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see> or 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>, 
and no Data Matrix could be found in <paramref name="image" />. 
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixDataMatrixDecodeErrorException">
If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" /> is 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see> or 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>,
and  no Data Matrix code that was 
successfully found in   <paramref name="image" /> could be successfully decoded.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixDataMatrixParseErrorException">
If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" /> is
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see> or 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>, 
and no Data Matrix code in  <paramref name="image" />
that was successfully decoded could be successfully parsed.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCalibFixDataMatrixParseErrorException">
If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" /> is 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>,  
and one component of the grid pitch extracted from any Data Matrix code 
in <paramref name="image" /> is less than or equal to zero.
</exception>
            <remarks> 
Notes:
<list type="bullet"><item> If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />
       is neither <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see> nor
         <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>, 
         <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.SymbolParseResults" />
         in the returned result will be empty. 
</item><item> If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" /> is either 
         <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see> or 
         <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>,
         <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.SymbolParseResults" /> 
         in the returned result will contain an element corresponding to each Data
         Matrix code that was successfully found, decoded and parsed by 
         the tool. 
</item><item>   The current implementation of the tool stops searching for 
         Data Matrix codes after any single Data Matrix code in the image
         is successfully found, decoded and parsed. As a result, the size
         of <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.SymbolParseResults" /> in the returned result will not be greater than one. 
</item><item>   If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />
         is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>, then each
         Data Matrix code on the calibration plate must encode the grid
         pitch in addition to the grid position. The value of grid pitch
         encoded in the Data Matrix code is used by the tool, 
         <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchX" /> and 
         <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchY" /> are ignored. 
</item><item>   If <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />
         is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see>, then each Data Matrix code
         must encode the grid position and may optionally encode the 
         grid pitch. The value of grid pitch encoded in the Data Matrix 
         codes will not be used by the tool, but it will be stored in  
         the returned result. The tool will use <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchX" /> and 
         <see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchY" />. 
</item><item>   The size of checkers in the image must be at least 15x15 
         pixels.  If Data Matrix codes are used as calibration fiducials
         the Data Matrix codes should have a minimum resolution of 4 pixels per module (ppm). 
</item></list></remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.IsThreadSafe">
            <inheritdoc />
            <value>
The value of this read-only property is true.
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.DataMatrixTimeoutSeconds">
            <summary>
The maximum number of seconds to search for a single DataMatrix
fiducial.
</summary>
            <remarks>
                <para>
This property is only used when
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />
is either
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrix</see>
or
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseDataMatrixWithGridPitch</see>:
</para>
                <para>
                    <list type="bullet">
                        <item>
If
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Algorithm" />
is
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Exhaustive</see>
or
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Efficient</see>,
an exception will occur if it takes longer than
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.DataMatrixTimeoutSeconds" />
to find an acceptable DataMatrix fiducial.
</item>
                        <item>
If
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Algorithm" />
is
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">ExhaustiveMultiRegion</see>
or
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">EfficientMultiRegion</see>,
an exception will occur if it takes longer than
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.DataMatrixTimeoutSeconds" />
to find the first acceptable DataMatrix fiducial. Once the operator
finds the first acceptable DataMatrix fiducial without timeout, the
operator processes each isolated region of checkerboard features. For
each isolated region of checkeboard features, if it takes longer than
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.DataMatrixTimeoutSeconds" />
to find a DataMatrix fiducial, the operator will not include any
features from that region but no exception will be thrown.
</item>
                    </list>
                </para>
            </remarks>
            <value>
The default value is Double.PositiveInfinity (i.e. do not
time out).
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If new value is less than or equal to zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.CheckerAngleMax">
            <summary>
Gets/sets the maximum angle of checker orientations.
Note that if the new value is smaller than 
CheckerAngleMin, then CheckerAngleMin will be changed to the new CheckerAngleMax.
</summary>
            <value>
The default value is  Math.PI (in radians, i.e. positive 180 degrees).
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
The purpose of CheckerAngleMin and CheckerAngleMax is to improve speed
performance when the checker orientations are known.
<para>
CheckerAngleMin and CheckerAngleMax are  only used when 
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Algorithm" /> is  
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Exhaustive</see>.
</para><para>
Note that if the new value is smaller than 
CheckerAngleMin, then CheckerAngleMin will be changed to the new CheckerAngleMax.  
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.CheckerAngleMin">
            <summary>
Gets/sets the minimum angle of checker orientations.
Note that if the new value is larger than CheckerAngleMax, 
then CheckerAngleMax will be changed to the new CheckerAngleMin.
</summary>
            <value>
The default value is  -Math.PI (in radians, i.e. negative 180 degrees).
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
The purpose of CheckerAngleMin and CheckerAngleMax is to improve speed
performance when the checker orientations are known.
<para>
CheckerAngleMin and CheckerAngleMax are  only used when   
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Algorithm" /> is  
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Exhaustive</see>.
</para><para>
Note that if the new value is larger than CheckerAngleMax, 
then CheckerAngleMax will be changed to the new CheckerAngleMin.  
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.CheckersCoverFOV">
            <summary>
Gets/sets whether the checkers entirely cover the field of view.
</summary>
            <value>
The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
Note that the purpose of CheckersCoverFOV is to improve speed
performance when the checker coverage is known.
CheckersCoverFOV should only be set to true
if it is known beforehand that the checkers will cover the
entire image for each camera at each pose.
<para>
Note that CheckersCoverFOV is only used when 
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Algorithm" /> is  
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Exhaustive</see>.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.UniformLighting">
            <summary>
Gets/sets the flag to indicate whether the checkerboard
is uniformly illuminated in the run-time images.
</summary>
            <value>
The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
                <para>
When set to true, the extractor expects the light checkers to be
        uniformly illuminated, and uses an efficient technique for
        finding the vertices which can improve the speed performance.  
</para>
                <para>
        However, if in fact the illumination is not
        uniform, this technique may not find certain vertices that
        are severely affected by the non-uniform lighting.  
</para>
                <para>
When set to false, the tool performs better in presence of
severe non-uniform lighting, and may find more vertices.  
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.NeedBothCheckers">
            <summary>
 Gets/sets the flag to indicate whether the tool should find
 only vertices shared by two interior light checkers.
</summary>
            <value>
The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
 When set to true, the extractor will find only those vertices
        belonging simultaneously to two interior light checkers.
<para>
 An interior checker is one that does not touch the image
        boundary or the border of the calibration plate.
</para><para>
 When set to false, the extractor will attempt to find all
 vertices of all interior light checkers.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PrecisionThreshold">
            <summary>
Gets/sets the threshold for discarding vertices with excessive
positional uncertainty.  This is specified in pixels.
</summary>
            <value>
The default value is HUGE_VAL (the largest representable value of type double).
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
Due to noise and distortion, there are errors in the computed
vertex positions.  The algorithm internally estimates the
position uncertainty for all found vertices, and excludes those
from the final result whose position uncertainty estimates
exceed the threshold specified here.
</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the input value is less than 0 in the setter.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Algorithm">
            <summary>
Gets/sets the feature extraction algorithm. 
</summary>
            <value>
The default value is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Exhaustive</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If the value is invalid, i.e., not a listed member in <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants" />.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode">
            <summary>
Gets/sets the label mode of the vertices on the checkerboard calibration plate. 
</summary>
            <value>
The default value is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">None</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes. 
</event>
            <exception cref="T:System.ArgumentException">
If the value is invalid, i.e., not a listed member in <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.OriginY">
            <summary>
Gets/sets the the y value of the designated origin to be used for labeling of returned feature points.
<para>
The vertex closest to  point (OriginX, OriginY)
will be used as the origin for point correspondence when
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" /> is 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseOrigin</see>.
</para></summary>
            <value>
The y value of the designated origin. The default value is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
When operating in <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseFiducial</see> mode,
this property is ignored.  
</remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.OriginX">
            <summary>
Gets/sets the the x value of the designated origin to be used for labeling of returned feature points.
<para>
The vertex closest to  point (OriginX, OriginY)
will be used as the origin for point correspondence when
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.LabelMode" />
is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseOrigin</see>.
</para></summary>
            <value>
The x value of the designated origin. The default value is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <remarks>
When operating in <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">UseFiducial</see> mode,
this property is ignored.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchY">
            <summary>
Gets/sets the physical units of grid pitch along the y-axis of the 
see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />).
It is the distance between any two adjacent 
</summary>
            <value>
The y value of the physical grid pitch of the checkerboard calibration plate. The default value is 1.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The value is less than or equal to 0.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchX">
            <summary>
Gets/sets the physical units of grid pitch along the x-axis of the 
calibration plate coordinate system (Plate2D, 
see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />).
It is the distance between any two adjacent 
checker vertices whenever the line joining them is parallel to the 
x axis of Plate2D. 
</summary>
            <value>
The x value of the physical grid pitch of the checkerboard calibration plate. The default value is 1.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when this property changes.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
The value is less than or equal to 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Finalize">
            <summary>
Finalize this CogCalibFeatureExtractorCheckerboard.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Dispose">
            <summary>
Destruct this CogCalibFeatureExtractorCheckerboard.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard)">
            <summary>
Copy constructs a CogCalibFeatureExtractorCheckerboard object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeatureExtractorCheckerboard object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.#ctor(System.Double,System.Double)">
            <summary>
Construct this CogCalibFeatureExtractorCheckerboard using the specified grid pitch.
</summary>
            <param name="initialGridPitchX">
The x value of the initial grid pitch for the calibration plate.
</param>
            <param name="initialGridPitchY">
The y value of the initial grid pitch for the calibration plate.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="initialGridPitchX" />, or <paramref name="initialGridPitchX" /> is less than or equal to 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.#ctor">
            <summary>
Construct this CogCalibFeatureExtractorCheckerboard using the default parameters:
<list type="bullet"><item> PhysGridPitchX and  PhysGridPitchY are (1,1); </item><item> OriginX and OriginY are (0,0); </item><item> LabelMode is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">None</see>; </item><item> PrecisionThreshold is HUGE_VAL (the largest representable value of type double); </item><item> NeedBothCheckers is true; </item><item> UniformLighting is false; </item><item> CheckerAngleMin is -Math.PI (in radians, i.e. negative 180 degrees); </item><item> CheckerAngleMax is Math.PI (in radians, i.e. positive 180 degrees); </item><item> Algorithm is <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">Exhaustive</see>; </item><item> CheckersCoverFOV is false; </item></list></summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfDataMatrixTimeoutSeconds">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by DataMatrixTimeoutSeconds
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfCheckersCoverFOV">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CheckersCoverFOV
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfCheckerAngleMax">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CheckerAngleMax
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfCheckerAngleMin">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CheckerAngleMin
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfUniformLighting">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by UniformLighting
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfNeedBothCheckers">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by NeedBothCheckers
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfPrecisionThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by PrecisionThreshold
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfAlgorithm">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Algorithm
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfLabelMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LabelMode
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfOriginY">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OriginY
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfOriginX">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OriginX
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfPhysGridPitchY">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by PhysGridPitchY
may have been changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.SfPhysGridPitchX">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by PhysGridPitchX
may have been changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard">
            <summary>
This class defines a checkerboard calibration feature extractor.
This extractor extracts the calibration features from an image or image collections of a
checkerboard calibration plate. Note that the checkerboard calibration plate must follow the Cognex specifications.
<para>
This feature extractor operates with a checkerboard style
calibration plate consisting of a grid of alternating light and
dark checkers. 
</para><para>
For each image of a checkerboard, the extractor locates the vertices 
of checkers in the image and generates a correspondence  
of vertex locations in image with vertex locations on the physical 
calibration plate coordinate system (Plate2D, see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />).
</para></summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants">
            <summary>
This class defines enumeration constants to define the algorithm used 
in feature extractor.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants.EfficientMultiRegion">
            <summary>
Similar to ExhaustiveMultiRegion, but using the Efficient
algorithm instead of the Exhaustive algorithm. In other words,
EfficientMultiRegion can handle disconnected features 
if each group is near a DataMatrix code, similar to how
ExhaustiveMultiRegion can handle disconnected features.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants.Efficient">
            <summary>
An efficient algorithm: This algorithm uses an efficient
strategy which is much faster than the exhaustive algorithm
with comparable robustness, accuracy, and repeatability. The
efficient algorithm requires less memory in most cases of
contrast variations and the other image artifacts. The
efficient algorithm is more suitable for time critical
applications that require checker feature extraction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants.ExhaustiveMultiRegion">
            <summary>
Similar to Exhaustive, but it returns feature correspondences from
all contiguous regions of checkerboard features in which a
DataMatrix was successfully decoded.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants.Exhaustive">
            <summary>
An exhaustive algorithm used for registering and labeling the
features.  This algorithm uses an exhaustive strategy and is
more robust than the standard algorithm, although it may take
longer to run. 
<para>
This exhaustive algorithm was specifically
designed to tolerate: contrast variations, low contrast
images, image blurring, defects on the plate, and
highlights. In addition, the exhaustive algorithm will often
return slightly different positions (differing by less than
0.01 pel in most cases) for the found features than the
Standard algorithm.
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardAlgorithmConstants.Standard">
            <summary>
The standard algorithm used for registering and
labeling the features. This algorithm is fast and works well on clean
images but may fail on images better handled by Exhaustive mode.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants">
            <summary>
This class defines enumeration constants to define the label mode of the vertices 
on the checkerboard, i.e., how to set the origin and axes of Grid2D.
</summary>
            <remarks>
                <para>
  Grid2D coordinate system: This coordinate system defines 
    coordinates of points in the plane of the calibration plate; 
    the origin of the coordinate system is at one of the vertices, 
    the directions of the x-axis and y-axis are along the lines through 
    a row of vertices and column of vertices respectively. The unit of
    measurement along each axis is specified in tiles.
</para>
                <para>
  Plate2D coordinate system: Similar to Grid2D, this coordinate 
    system defines coordinates of points in the plane of the calibration 
    plate. It has the same origin as Grid2D and its axes have the same 
    orientation as the Grid2D axes, but it has different measurement units 
    than Grid2D. The units on the axes are defined by the pitch of the 
    calibration plate checkers in physical units. 
</para>
                <para>
    Further determination of the origin and axes of Grid2D depends on 
    the label mode chosen, as described in comments for each label mode in this class.
</para>
                <para>
Note that neither None nor UseOrigin label mode is appropriate if it is crucial 
to have the Grid2D coordinate system stationary with respect to 
the calibration plate (e.g. in calibration using multiple calibration poses), 
in those cases, other label modes must be used. </para>
                <para>
    It is required that all checkers in the image are at 
    least 15x15 pixels in size. If Data Matrix codes are used as 
    calibration fiducials the Data Matrix codes should have a minimum 
    resolution of 4 pixels per module (ppm).
</para>
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants.UseDataMatrixWithGridPitch">
            <summary>
This is similar to UseDataMatrix, but in this mode, 
the tool will ignore 
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchX" /> and 
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchY" /> in 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard" />, 
and will instead use the value of physical grid pitch 
encoded in the Data Matrix codes. 
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants.UseDataMatrix">
            <summary>
This specifies that standard Data Matrix codes are to be used as calibration
fiducials that are uniquely identifiable in the calibration target.
This mode will ignore any information about the physical grid pitch 
that may be encoded in the Data Matrix codes, and will instead use 
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchX" /> and 
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.PhysGridPitchY" /> in 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard" />.
<para>
For the specification of supported data matrix codes, please read the related user help documents. 
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants.UseFiducial">
            <summary>
This specifies that a Cognex specific 
fiducial target will be located and used for setting the Grid2D 
coordinate system. An example can be found in the specification of 
Cognex calibration plate with Cognex part number of 320-0015. 
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants.UseOrigin">
            <summary>
This specifies that the vertex closest to a designated origin location 
be used as the origin of the Grid2D coordinate system. 
The designated origin can be set using the properties
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.OriginX" /> and
<see cref="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.OriginY" />. 
The direction of the axes is set exactly as in None 
label mode.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants.None">
            <summary>
Under this label mode, the origin of the Grid2D 
coordinate system is set at the vertex closest to the center of the 
image. The Grid2D x-axis (resp. Grid2D y-axis) is set to be 
the direction of a row or a column of vertices along which x-components 
(resp. y-components) of images coordinates of vertices 
increase faster. 
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.OnFeaturesExtracted(System.Int32,System.Int32,Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult)">
            <summary>
Method to support feature extraction progress event. 
</summary>
            <returns>
False if user requires to cancel the operation, and true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibFeatureExtractorBase object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.Execute(Cognex.VisionPro.CogImageCollectionMCamerasNPoses)">
            <summary>
Extract features from a set of calibration images, acquired
from one or multiple cameras over different calibration poses.
The images are indexed by pose first, then by camera (see <see cref="T:Cognex.VisionPro.CogImageCollectionMCamerasNPoses" /> for more details).
The feature extraction is done by calling the Execute(ICogImage ) 
method for each calibration image.
The Execute(ICogImage ) method will be invoked on multiple threads if
<see cref="P:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.IsThreadSafe" /> is true 
and <see cref="P:Cognex.VisionPro.CogVisionToolMultiThreading.Enable">CogVisionToolMultiThreading.Enable</see> is true.
</summary>
            <event cref="E:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.FeaturesExtracted">
Fired after the features are extracted from each image.
</event>
            <param name="images">
A collection of the calibration images, indexed first by calibration pose,
then by camera.
</param>
            <returns>
The feature extraction results including the extracted feature correspondences.
</returns>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogCanceledException">
If the operation is cancelled by user via the event handler. In this case, no result returns.
</exception>
            <remarks>
 For additional exceptions, please see the Execute(ICogImage) overload in the corresponding derived class
(e.g <see cref="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard.Execute(Cognex.VisionPro.ICogImage)">CogCalibFeatureExtractorCheckerboard.Execute(ICogImage)</see>).
</remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.IsThreadSafe">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.Execute(Cognex.VisionPro.ICogImage)">
            <inheritdoc />
        </member>
        <member name="E:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.FeaturesExtracted">
            <summary>
Feature extraction progress event. The user can create a <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventHandler" /> and add to this event.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase">
            <summary>
This class is the abstract base class for 2D calibration feature extractors. 
<para>
Clients that are using a checkerboard calibration plate following Cognex specification can use the 
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboard" /> class
to perform calibration feature extraction. These clients do not need to be concerned with this base class.
</para><para>
Clients that are using a special calibration object must implement their own calibration feature 
extractor class capable of extracting calibration features from images of the special calibration object.
One way to implement such a custom calibration feature extractor class, is to derive the custom calibration 
feature extraction class from this base class.
</para><para>
This abstract base class provides an implementation of 
the  <see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.CogImageCollectionMCamerasNPoses)" /> method.
This implementation calls the derived class' <see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)" /> and 
will make the calls on multiple threads if the derived class 
<see cref="P:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.IsThreadSafe" /> is true 
and <see cref="P:Cognex.VisionPro.CogVisionToolMultiThreading.Enable">CogVisionToolMultiThreading.Enable</see> is true.
The provided implementation supports feature extraction progress events as well - the 
<see cref="E:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.FeaturesExtracted" /> event is fired 
as soon as feature extraction is completed on each calibration image. 
</para><para>
Derived classes must: implement an override of the
<see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)" /> method as well as implement
the <see cref="P:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.IsThreadSafe" /> property which specifies whether the override of Execute(ICogImage) is thread-safe or not.
</para></summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventHandler">
            <summary>
This is the delegate of features Extracted progress event handler.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.RequestCancel">
            <summary>
Request to cancel the operation.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.CancelRequested">
            <summary>
Gets whether it is requested to cancel the operation.
</summary>
            <value>
True if cancel is requested; False Otherwise
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.Features">
            <summary>
Gets the feature extraction result for the calibration image with 
PoseIndex and CameraIndex.
</summary>
            <value>
The result including the features that have been extracted.
</value>
            <remarks>
The returned result is immutable. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.CameraIndex">
            <summary>
Gets the camera index of the image whose calibration features have been extracted.
</summary>
            <value>
The camera index of the image whose calibration features have been extracted.
</value>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.PoseIndex">
            <summary>
Gets the calibration pose index of the image whose calibration features have been extracted.
</summary>
            <value>
The calibration pose index of the image whose calibration features have been extracted.
</value>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.Finalize">
            <summary>
Finalize this CogCalibFeaturesExtractedEventArgs.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.Dispose">
            <summary>
Destruct this CogCalibFeaturesExtractedEventArgs.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs.#ctor(System.Int32,System.Int32,Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult)">
            <summary>
Construct this CogCalibFeaturesExtractedEventArgs using the provided
information for an image whose calibration features have been extracted.
</summary>
            <param name="poseIndex">
The pose index for the processed image.
</param>
            <param name="camIndex">
The camera index for the processed image.
</param>
            <param name="features">
The result including feature correspondences for the processed image. 
Property Features will return <paramref name="features" /></param>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesExtractedEventArgs">
            <summary>
This class holds data used by
<see cref="E:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.FeaturesExtracted" /> event handler. 
FeaturesExtracted event fires each time feature extraction of an image has finished in 
<see cref="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.Execute(Cognex.VisionPro.CogImageCollectionMCamerasNPoses)" />.
<para>
Note that it does not require to fire FeaturesExtracted event in the implementation of 
<see cref="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase.Execute(Cognex.VisionPro.ICogImage)" />.
</para></summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.IsThreadSafe">
            <summary>
Gets whether the implementation of <see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)" /> is thread-safe.
Thread-safety is required to allow multithreading within implementations 
of 
<see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.CogImageCollectionMCamerasNPoses)" /> method.
</summary>
            <value>
Whether the implementation of <see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)" />  is thread-safe.
</value>
            <remarks>
Note that in the implementation of the derived classes, this property must be set correctly.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.CogImageCollectionMCamerasNPoses)">
            <summary>
Extract features from a set of calibration images, acquired
from one or multiple cameras over different poses.
The images are organized in a collection, indexed by calibration plate pose.
Each item in the collection is a collection of images, indexed by camera.
The feature extraction is done by calling the <see cref="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)" />  
method for each calibration image.
The Execute(ICogImage ) method will be invoked on multiple threads
if <see cref="P:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.IsThreadSafe" /> is true 
and <see cref="P:Cognex.VisionPro.CogVisionToolMultiThreading.Enable">CogVisionToolMultiThreading.Enable</see> is true.
</summary>
            <param name="images">
Collections of images, indexed first by pose,
then by camera.
</param>
            <returns>
The results of the extracted feature correspondences, which can be used for multi-camera multi-pose calibration. 
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Extract features from a calibration image.
</summary>
            <param name="image">
The calibration image to extract features from.
</param>
            <returns>
The result of the extracted feature correspondences. The returned result might be used for single image calibration.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.ICogCalibFeatureExtractor">
            <summary>
This is the interface class for 2D calibration feature extractors.
It includes one overload of Execute which can be used for single image calibration, 
and another overload of Execute is good for multi-camera multi-pose calibration.
In addition, multi-thread implementation for the second overload in the derived classes
(e.g. <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorBase" /> ) can improve the speed performance.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrationResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.PelRectsMCameras">
            <summary>
Gets the image windows for the cameras.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.SymbolParseResultsMCamerasNPoses">
            <summary>
Gets the parse results for the ID symbols.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.FeatureCrspsMCamerasNPoses">
            <summary>
Gets the feature correspondences.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.Finalize">
            <summary>
Finalize this CogCalibFeatureExtractorResults.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.Dispose">
            <summary>
Destruct this CogCalibFeatureExtractorResults.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults)">
            <summary>
Copy constructs a CogCalibFeatureExtractorResults object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeatureExtractorResults object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.#ctor(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses,Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses,System.Drawing.Rectangle[])">
            <summary>
Construct this CogCalibFeatureExtractorResults with the supplied components.
</summary>
            <param name="featureCrspsMCamerasNPoses">
The feature correspondences. May not be null.
</param>
            <param name="symbolParseResultsMCamerasNPoses">
The symbol parse results. May be null.
</param>
            <param name="pelRectsMCameras">
The image windows. May be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="featureCrspsMCamerasNPoses" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults.#ctor">
            <summary>
Construct this default (empty) CogCalibFeatureExtractorResults.
FeatureCrspsMCamerasNPoses is empty.
SymbolParseResultsMCamerasNPoses collection is null.
The PelRectsMCameras is null.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResults">
            <summary>
This class contains the feature extraction result from multiple poses of multiple images.
<para>
This class is immutable, and it may not be changed once
it has been constructed. 
</para><para>
Note that this class is not a simple collection of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult" />, 
it has getters to directly return the following (which are used by calibration functions):
<list type="bullet"><item> The feature correspondences: FeatureCrspsMCamerasNPoses of type <see cref="T:Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses" />. </item><item> The symbol parse results: SymbolParseResultsMCamerasNPoses of type  <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses" />. </item><item> The Image windows: PelRectsMCameras of type array of  <see cref="T:System.Drawing.Rectangle" />.       </item></list></para></summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogHandEyeCalibrationResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.CreateResultGraphics">
            <summary>
Creates graphics for image positions of the found features in this result. It is equivalent to CreateResultGraphics(null).
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.CreateResultGraphics(Cognex.VisionPro.CogPointMarker)">
            <summary>
Creates graphics for image positions of the found features in this result.
</summary>
            <param name="exampleMarker">
The example point marker which might be used to set the graphic properties such as SizeInScreenPixels, Color, LineStyle, etc.
If <paramref name="exampleMarker" /> is null, a default constructed CogPointMarker is used as the example.
</param>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.PelRect">
            <summary>
Gets the bounds of the input image.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.SymbolParseResults">
            <summary>
Gets the parsed symbol information for the ID codes found in the image. 
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.FeatureCrsps">
            <summary>
Gets the feature correspondences.
</summary>
            <value>
A collection of feature correspondences.
</value>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.Finalize">
            <summary>
Finalize this CogCalibFeatureExtractorResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.Dispose">
            <summary>
Destruct this CogCalibFeatureExtractorResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult)">
            <summary>
Copy constructs a CogCalibFeatureExtractorResult object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeatureExtractorResult object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.#ctor(Cognex.VisionPro.CogFeatureCrsps,Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults,System.Drawing.Rectangle)">
            <summary>
Construct this CogCalibFeatureExtractorResult with the supplied components.
</summary>
            <param name="featureCrsps">
The collection of feature correspondences. May not be null.
</param>
            <param name="symbolParseResults">
The collection of symbol parse results. It may be null.
</param>
            <param name="pelRect">
The bounds of the input image.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="featureCrsps" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult.#ctor">
            <summary>
Construct this default (empty) CogCalibFeatureExtractorResult.
The FeatureCrsps is empty.
The SymbolParseResults is null.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorResult">
            <summary>
This class holds the feature extraction result from one image, and it has 
2 collections: a collection of feature correspondences, 
and a collection of symbol parse results.
<para>
This class is immutable, and it may not be changed once
it has been constructed. 
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibFeaturesSymbolParseResultsMCamerasNPoses object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses)">
            <summary>
Copy constructs a CogCalibFeaturesSymbolParseResultsMCamerasNPoses object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeaturesSymbolParseResultsMCamerasNPoses object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses.#ctor(System.Collections.Generic.List`1{Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras})">
            <summary>
Constructs a CogCalibFeaturesSymbolParseResultsMCamerasNPoses using a List of CogCalibFeaturesSymbolParseResultsMCameras.
</summary>
            <param name="items">
A List of CogCalibFeaturesSymbolParseResultsMCameras.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="items" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses.#ctor">
            <summary>
Constructs a default (empty) CogCalibFeaturesSymbolParseResultsMCamerasNPoses.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCamerasNPoses">
            <summary>
This class holds the symbol parse results for all the ID symbols in the images from multiple cameras at multiple poses.
<para>
CogCalibFeaturesSymbolParseResultsMCamerasNPoses[poseIndex][cameraIndex] is a <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults" /> holding
the symbol parse results for the image from camera "cameraIndex" at pose "poseIndex".
</para><para>
This class is immutable, and it may not be changed once
it has been constructed. 
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibFeaturesSymbolParseResultsMCameras object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras)">
            <summary>
Copy constructs a CogCalibFeaturesSymbolParseResultsMCameras object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeaturesSymbolParseResultsMCameras object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras.#ctor(System.Collections.Generic.List`1{Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults})">
            <summary>
Constructs a CogCalibFeaturesSymbolParseResultsMCameras using a List of CogCalibFeaturesSymbolParseResults.
</summary>
            <param name="items">
A List of CogCalibFeaturesSymbolParseResults.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="items" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras.#ctor">
            <summary>
Constructs a default (empty) CogCalibFeaturesSymbolParseResultsMCameras.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResultsMCameras">
            <summary>
This class holds the symbol parse results for all the ID symbols in the images from multiple cameras at a single pose.
<para>
CogCalibFeaturesSymbolParseResultsMCameras[cameraIndex] is a <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults" /> holding
the symbol parse results for the image from camera "cameraIndex" at one pose.
</para><para>
This class is immutable, and it may not be changed once
it has been constructed. 
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibFeaturesSymbolParseResults object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults)">
            <summary>
Copy constructs a CogCalibFeaturesSymbolParseResults object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeaturesSymbolParseResults object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults.#ctor(System.Collections.Generic.List`1{Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult})">
            <summary>
Constructs a CogCalibFeaturesSymbolParseResults using a List of CogCalibFeaturesSymbolParseResult.
</summary>
            <param name="items">
A List of CogCalibFeaturesSymbolParseResult.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="items" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults.#ctor">
            <summary>
Constructs a default (empty) CogCalibFeaturesSymbolParseResults.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResults">
            <summary>
This class holds the symbol parse results for all the ID symbols in one image.
<para>
This class is immutable, and it may not be changed once
it has been constructed. 
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for CogCalibFeaturesSymbolParseResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a CogCalibFeaturesSymbolParseResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.RawDecodedString">
            <summary>
Gets the raw decoded string of the symbol.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.UnitString">
            <summary>
Gets the measurement units in which GridPitchX and GridPitchY are specified.
</summary>
            <exception cref="T:System.InvalidOperationException">
If HasUnitString is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.HasUnitString">
            <summary>
Gets whether or not this result has a valid UnitString.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.GridPitchY">
            <summary>
Gets the y value of the grid pitch of the checkerboard tiles along the
Y axis of Plate2D in physical measurement units.
</summary>
            <exception cref="T:System.InvalidOperationException">
If HasGridPitch is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.GridPitchX">
            <summary>
Gets the x value of the grid pitch of the checkerboard tiles along the
X axis of Plate2D in physical measurement units.
</summary>
            <exception cref="T:System.InvalidOperationException">
If HasGridPitch is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.HasGridPitch">
            <summary>
Gets whether or not this result has valid grid pitch information.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.PositionYGrid2D">
            <summary>
Gets the y value of Grid2D position of the Data Matrix code.
For definition of Grid2D, see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />.
</summary>
            <exception cref="T:System.InvalidOperationException">
If HasPositionGrid2D is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.PositionXGrid2D">
            <summary>
Gets the x value of Grid2D position of the Data Matrix code.
For definition of Grid2D, see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />.
</summary>
            <exception cref="T:System.InvalidOperationException">
If HasPositionGrid2D is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.HasPositionGrid2D">
            <summary>
Gets whether or not this result has a valid position in Grid2D.
For definition of Grid2D, see the remarks section of <see cref="T:Cognex.VisionPro.CalibFix.CogCalibFeatureExtractorCheckerboardLabelModeConstants" />.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.Finalize">
            <summary>
Finalize this CogCalibFeaturesSymbolParseResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.Dispose">
            <summary>
Destruct this CogCalibFeaturesSymbolParseResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.#ctor(Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult)">
            <summary>
Copy constructs a CogCalibFeaturesSymbolParseResult object. This is a deep
copy.
</summary>
            <param name="other">
The CogCalibFeaturesSymbolParseResult object to be copied.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult.#ctor">
            <summary>
Construct this default (empty) CogCalibFeaturesSymbolParseResult. 
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibFeaturesSymbolParseResult">
            <summary>
This class contains the labeling information from the parsing result of one 
ID code on the checkerboard.  It is immutable, and can only be created 
from calibration feature extraction.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants">
            <summary>
Enumeration of diagnostic data that can be included in the tool's LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.All">
            <summary>
Include all diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.CorrectedAxes">
            <summary>
Include the (non-interactive) coordinate axes that represent the corrected space in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.UncorrectedAxes">
            <summary>
Include the (non-interactive) coordinate axes that represent uncorrected space in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.CorrectedImageMask">
            <summary>
Include the corrected image mask in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordDiagConstants.None">
            <summary>
Do not include any records in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordConstants">
            <summary>
Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordConstants.All">
            <summary>
Include all non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordConstants.CorrectedImage">
            <summary>
Include the corrected image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants">
            <summary>
Enumeration of data that can be included in the tool's CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.All">
            <summary>
Include all data in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.CorrectedTrainingImageMask">
            <summary>
Include the corrected training image mask in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.CorrectedTrainingImageDestinationRectangle">
            <summary>
Include the interactive destination rectangle in the CurrentRecord
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.CorrectedTrainingImage">
            <summary>
Include the corrected training image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.TrainingImagesRawCorrectedAxes">
            <summary>
Include the (non-interactive) coordinate axes that represent raw corrected space of the training image and the corrected training image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.TrainingImagesCorrectedAxes">
            <summary>
Include the interactive graphic that represents and allows adjustment of the axes of corrected space of the training image and the corrected training image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.TrainingImagesUncorrectedAxes">
            <summary>
Include the (non-interactive) coordinate axes that represent the uncorrected space of the training image and the corrected training image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.TrainingImage">
            <summary>
Include the training image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.CorrectedAxes">
            <summary>
If trained, include the (non-interactive) coordinate axes that represent corrected space in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.UncorrectedAxes">
            <summary>
Include the (non-interactive) coordinate axes that represent the uncorrected space in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorCurrentRecordConstants.None">
            <summary>
Do not include any data in the CurrentRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailureTypeConstants">
            <summary>
Constants used to describe a specific metric failure.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailureTypeConstants.CorrespondenceFeaturesOutsidePelRect">
            <summary>
One or more correspondence features for the poses in the 
suitable-subset fell outside its corresponding pelrect.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationFailureTypeConstants.CorrespondenceDataDegenerate">
            <summary>
The correspondence data for the poses in the suitable-subset was 
degenerate.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants">
            <summary>
Constants used to refer to a specific validation metric.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants.All">
            <summary>
Validate all metrics: XScale, YScale, ThetaScale, and Skew.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants.Skew">
            <summary>
Skew between the x and y axes of the motion stage. 
The UncorrectedHome2DFromStage2D poses must contain at least 3 poses 
that have x and y translations only (no rotation) in order to compute 
this metric.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants.ThetaScale">
            <summary>
Scaling along the theta-axis between the given 
UncorrectedHome2DFromStage2D poses and estimated Home2DFromStage2D 
poses. The UncorrectedHome2DFromStage2D poses must contain at least 2 
poses that have rotation only in order to compute this metric.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants.YScale">
            <summary>
Scaling along the y-axis between the given UncorrectedHome2DFromStage2D 
poses and estimated Home2DFromStage2D poses. 
The UncorrectedHome2DFromStage2D poses must contain at least 2 poses 
that have y-translation only in order to compute this metric.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants.XScale">
            <summary>
Scaling along the x-axis between the given UncorrectedHome2DFromStage2D
poses and estimated Home2DFromStage2D poses. 
The UncorrectedHome2DFromStage2D poses must contain at least 2 poses 
that have x-translation only in order to compute this metric.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogMotionStageValidationMetricConstants.None">
            <summary>
No validation metric is specified.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeHome2DUnitLengthReferenceConstants">
            <summary>
Enumeration that specifies how to establish unit length in Home2D
coordinates.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeHome2DUnitLengthReferenceConstants.UseMotionStage">
            <summary>
Use the motion stage to establish unit length in Home2D. Use this mode
if the motion stage is deemed to be more accurate than the calibration
plate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogHandEyeHome2DUnitLengthReferenceConstants.UseCalibrationPlate">
            <summary>
Use the calibration plate to establish unit length in Home2D. Use this
mode if the calibration plate is deemed to be more accurate than the
motion stage.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogHandEyeMotionCapabilityConstants">
            <summary>
Constants used by the operator to specify what the motion stage can
do.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorSpaceToOutputConstants">
            <summary>
Enumeration that specifies which coordinate space will be selected in
the corrected image. See the "Remarks" section of
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector" />
for descriptions of these spaces.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorSpaceToOutputConstants.CorrectedRoot">
            <summary>
The selected space of the corrected image will be corrected root.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorSpaceToOutputConstants.Corrected">
            <summary>
The selected space of the corrected imiage will be a fully-qualified
copy of the corrected space name.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorAdjustmentSpaceConstants">
            <summary>
Enumeration that specifies whether the parameters for adjusting the
corrected space are expressed in uncorrected root space, or in raw
corrected space. See the "Remarks" section of
<see cref="T:Cognex.VisionPro.CalibFix.CogCalibImageCorrector" />
for descriptions of these spaces.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorAdjustmentSpaceConstants.UncorrectedRoot">
            <summary>
The adjustment parameters are expressed in the uncorrected root
coordinate space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.CalibFix.CogCalibImageCorrectorAdjustmentSpaceConstants.RawCorrected">
            <summary>
The adjustment parameters are expressed in the raw corrected
coordinate space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.ICogHandEyeCalibrationResult.GetRaw2DFromHome2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Returns a ICogTransform2D which maps Home2D to Raw2D. If the 
calibration result is for a moving camera, the specified 
uncorrectedHome2DFromStage2D is used for computing the returned 
ICogTransform2D. Otherwise, the input uncorrectedHome2DFromStage2D is ignored.  
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The corresponding motion stage pose. If the calibration result is not for a moving
camera then this argument is ignored.
</param>
            <exception cref="T:System.ArgumentNullException">
If the calibration result is for a moving camera but the 
uncorrectedHome2DFromStage2D argument is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
If the calibration result haven't been calibrated.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.ICogHandEyeCalibrationResult.GetRaw2DFromCamera2D">
            <summary>
Returns a CogTransform2DCameraCalibration which maps Camera2D to Raw2D.
</summary>
            <exception cref="T:System.InvalidOperationException">
If the calibration result haven't been calibrated.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.CalibFix.ICogHandEyeCalibrationResult.GetHome2DFromCamera2D(Cognex.VisionPro.CogTransform2DRigid)">
            <summary>
Returns a CogTransform2DLinear which maps Camera2D to Home2D. If the 
calibration result is for a moving camera, the specified 
uncorrectedHome2DFromStage2D is used for computing the returned 
CogTransform2DRigid. Otherwise, the input uncorrectedHome2DFromStage2D is ignored.
</summary>
            <param name="uncorrectedHome2DFromStage2D">
The corresponding motion stage pose. If the calibration result is not for a moving
camera then this argument is ignored.
</param>
            <exception cref="T:System.ArgumentNullException">
If the calibration result is for a moving camera but the 
uncorrectedHome2DFromStage2D argument is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
If the calibration result haven't been calibrated.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.CalibFix.ICogHandEyeCalibrationResult">
            <summary>
The ICogHandEyeCalibrationResult class defines a common interface for  
primary and remote hand-eye calibration result. This interface class 
provides methods that converts between 3 different coordinate space.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'F:Cognex.VisionPro.CalibFix.CogHandEyeMotionCapabilityConstants.RotationAndTranslation2Axes'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Cognex.VisionPro.CalibFix.CogHandEyeMotionCapabilityConstants.RotationAndTranslation1Axis'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Cognex.VisionPro.CalibFix.CogHandEyeMotionCapabilityConstants.RotationOnly'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Cognex.VisionPro.CalibFix.CogHandEyeMotionCapabilityConstants.TranslationOnly1Axis'. -->
        <!-- Discarding badly formed XML document comment for member 'F:Cognex.VisionPro.CalibFix.CogHandEyeMotionCapabilityConstants.TranslationOnly2Axes'. -->
    </members>
</doc>